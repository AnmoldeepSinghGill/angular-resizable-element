var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/interfaces/BoundingRectangle.html",[0,0.287,1,0.63]],["body/interfaces/BoundingRectangle.html",[0,0.402,1,1.053,2,1.198,3,0.883,4,0.748,5,0.748,6,4.509,7,3.78,8,1.846,9,2.519,10,1.198,11,1.198,12,0.748,13,0.623,14,1.429,15,1.362,16,2.574,17,1.827,18,1.362,19,1.362,20,2.108,21,2.108,22,1.362,23,1.827,24,3.02,25,3.004,26,1.053,27,1.497,28,0.057,29,3.004,30,1.846,31,3.78,32,1.231,33,0.623,34,0.21,35,0.251,36,0.21]],["title/interfaces/Coordinate.html",[0,0.287,37,1.139]],["body/interfaces/Coordinate.html",[0,0.252,1,0.973,2,0.475,3,0.35,4,0.296,5,0.296,10,1.052,11,1.052,12,0.824,13,0.247,14,0.749,15,0.907,17,1.216,18,1.048,19,0.907,20,0.999,21,0.999,22,1.048,23,1.216,26,0.939,27,1.357,28,0.058,32,0.552,33,0.39,34,0.083,35,0.131,36,0.083,37,1.76,38,0.549,39,1.875,40,1.875,41,0.939,42,0.552,43,1.403,44,1.236,45,1.154,46,1.403,47,1.854,48,1.622,49,0.999,50,1.403,51,1.154,52,1.154,53,0.732,54,0.732,55,0.409,56,0.732,57,0.732,58,1.623,59,1.854,60,1.963,61,1.236,62,1.154,63,0.633,64,1.765,65,0.732,66,0.732,67,0.732,68,0.732,69,0.732,70,1.154,71,0.732,72,0.732,73,0.732,74,1.154,75,0.732,76,0.983,77,0.633,78,0.732,79,0.633,80,1.217,81,0.732,82,0.732,83,0.633,84,1.788,85,1.819,86,0.992,87,1.216,88,1.527,89,1.765,90,0.633,91,0.633,92,0.999,93,0.549,94,0.999,95,1.406,96,2.477,97,1.154,98,0.732,99,2.459,100,0.732,101,0.732,102,0.475,103,0.732,104,0.732,105,1.765,106,1.154,107,1.622,108,2.093,109,1.236,110,1.765,111,0.633,112,0.865,113,1.429,114,1.154,115,1.154,116,1.154,117,1.154,118,0.732,119,0.732,120,0.732,121,0.732,122,0.732,123,0.732,124,0.732,125,0.732,126,0.732,127,0.732,128,0.633,129,1.154,130,0.732,131,0.732,132,0.732,133,0.732,134,0.732,135,0.732,136,0.732,137,1.236,138,0.944,139,0.865,140,0.999,141,1.403,142,0.999,143,0.999,144,0.999,145,0.999,146,0.865,147,0.999,148,0.999,149,0.732,150,0.633,151,0.475,152,0.475,153,0.633,154,0.475,155,0.475,156,0.467,157,0.409,158,0.633,159,1.622,160,0.633,161,0.633,162,1.854,163,1.236,164,0.732,165,1.622,166,0.633,167,0.732,168,0.732,169,1.052,170,0.749,171,1.154,172,0.749,173,0.549,174,0.999,175,0.732,176,0.732,177,0.732,178,1.216,179,1.236,180,0.633,181,0.633,182,0.999,183,0.732,184,0.732,185,0.999,186,0.999,187,0.865,188,0.549,189,0.633,190,0.633,191,0.732,192,0.732,193,0.732,194,0.999,195,0.633,196,1.623,197,0.549,198,1.32,199,0.999,200,0.633,201,0.732,202,1.891,203,0.732,204,0.732,205,0.633,206,0.633,207,0.732,208,0.732,209,0.633,210,1.429,211,0.633,212,0.633,213,0.732,214,0.732,215,0.633,216,0.633,217,0.732,218,0.732,219,0.633,220,0.732,221,0.732,222,1.923,223,0.633,224,0.732,225,0.732,226,1.76,227,2.034,228,1.236,229,1.623,230,1.216,231,1.76,232,1.623,233,0.732,234,0.633,235,0.732,236,0.732,237,1.403,238,1.429,239,1.323,240,0.732,241,0.732,242,0.732,243,1.639,244,0.732,245,0.732,246,0.732,247,0.732,248,2.186,249,2.186,250,0.633,251,0.732,252,0.732,253,1.406,254,1.154,255,0.732,256,0.732,257,1.154,258,1.429,259,2.33,260,0.732,261,1.429,262,1.154,263,0.732,264,1.429,265,0.732,266,1.403,267,0.732,268,0.732,269,0.732,270,0.732,271,0.732,272,0.732,273,1.429,274,0.732,275,0.999,276,1.963,277,1.154,278,0.999,279,1.154,280,0.732,281,1.622,282,0.732,283,0.732,284,0.732,285,0.732,286,0.999,287,0.732,288,0.732,289,0.732,290,0.732,291,0.732,292,0.732,293,1.429,294,1.963,295,1.154,296,0.732,297,1.765,298,1.154,299,0.732,300,1.154,301,0.732,302,1.765,303,1.154,304,0.732,305,1.154,306,1.154,307,0.732,308,0.732,309,0.732,310,0.732,311,0.732,312,1.429,313,1.622,314,0.732,315,0.732,316,0.732,317,0.732,318,0.732,319,0.732,320,0.732,321,0.732,322,0.732,323,0.732,324,0.732,325,0.732,326,0.732,327,0.732,328,0.633,329,1.622,330,1.622,331,1.154,332,0.732,333,1.154,334,1.154,335,1.154,336,1.765,337,1.403,338,1.622,339,1.622,340,0.732,341,2.186,342,0.732,343,0.732,344,0.732,345,0.732,346,1.429,347,0.732,348,1.429,349,0.732,350,0.732,351,0.732,352,0.633,353,1.154,354,1.154,355,1.429,356,0.732,357,0.732,358,0.732,359,0.732,360,0.732,361,0.633,362,0.732,363,0.732,364,0.732,365,0.732,366,0.732,367,0.732,368,1.154,369,0.732,370,0.732,371,0.633,372,0.732,373,0.732,374,0.732,375,0.732,376,0.732,377,0.732,378,0.633,379,0.732,380,0.732,381,0.549,382,0.633,383,0.732,384,0.732,385,2.034,386,0.732,387,0.732,388,0.732,389,0.732,390,0.732,391,0.732,392,0.732,393,1.071,394,0.865,395,0.732,396,0.732,397,0.732,398,0.732,399,0.732,400,1.154,401,0.732,402,0.732,403,0.732,404,0.732,405,1.429,406,0.633,407,0.732,408,1.429,409,1.429,410,1.429,411,1.963,412,1.963,413,1.236,414,1.236,415,0.633,416,0.633,417,0.633,418,1.429,419,0.732,420,1.429,421,1.429,422,0.633,423,0.732,424,0.732,425,0.732,426,1.429,427,1.429,428,1.429,429,0.633,430,0.999,431,0.999,432,0.732]],["title/interfaces/Edges.html",[0,0.287,76,0.533]],["body/interfaces/Edges.html",[0,0.407,2,1.21,3,0.892,4,0.755,5,0.755,8,1.865,13,0.63,14,1.437,15,1.367,16,2.578,18,1.367,19,1.367,22,1.367,24,3.05,25,3.022,26,1.06,27,1.476,28,0.058,29,3.022,30,1.865,32,1.169,33,0.63,34,0.212,35,0.252,36,0.212,76,0.957,86,0.755,95,1.98,138,0.755,433,3.819,434,3.819,435,3.819]],["title/interfaces/PointerEventCoordinate.html",[0,0.287,83,1.139]],["body/interfaces/PointerEventCoordinate.html",[0,0.251,1,0.972,2,0.473,3,0.349,4,0.295,5,0.295,10,1.05,11,1.05,12,0.823,13,0.246,14,0.746,15,0.905,17,1.213,18,1.047,19,0.905,20,0.995,21,0.995,22,1.047,23,1.213,26,0.937,27,1.356,28,0.058,32,0.682,33,0.388,34,0.083,35,0.131,36,0.083,37,1.695,38,0.546,39,1.425,40,1.425,41,0.937,42,0.55,43,1.4,44,1.233,45,1.15,46,1.4,47,1.852,48,1.618,49,0.995,50,1.4,51,1.15,52,1.15,53,0.729,54,0.729,55,0.407,56,0.729,57,0.729,58,1.619,59,1.852,60,1.96,61,1.233,62,1.15,63,0.63,64,1.761,65,0.729,66,0.729,67,0.729,68,0.729,69,0.729,70,1.15,71,0.729,72,0.729,73,0.729,74,1.15,75,0.729,76,0.982,77,0.63,78,0.729,79,0.63,80,1.214,81,0.729,82,0.729,83,0.995,84,1.818,85,1.843,86,1.003,87,1.403,88,1.695,89,1.761,90,0.63,91,0.63,92,0.995,93,0.546,94,0.995,95,1.403,96,2.476,97,1.15,98,0.729,99,2.458,100,0.729,101,0.729,102,0.473,103,0.729,104,0.729,105,1.761,106,1.15,107,1.618,108,2.09,109,1.233,110,1.761,111,0.63,112,0.862,113,1.425,114,1.15,115,1.15,116,1.15,117,1.15,118,0.729,119,0.729,120,0.729,121,0.729,122,0.729,123,0.729,124,0.729,125,0.729,126,0.729,127,0.729,128,0.63,129,1.15,130,0.729,131,0.729,132,0.729,133,0.729,134,0.729,135,0.729,136,0.729,137,1.233,138,0.943,139,0.862,140,0.995,141,1.4,142,0.995,143,0.995,144,0.995,145,0.995,146,0.862,147,0.995,148,0.995,149,0.729,150,0.63,151,0.473,152,0.473,153,0.63,154,0.473,155,0.473,156,0.466,157,0.407,158,0.63,159,1.618,160,0.63,161,0.63,162,1.852,163,1.233,164,0.729,165,1.618,166,0.63,167,0.729,168,0.729,169,1.05,170,0.746,171,1.15,172,0.746,173,0.546,174,0.995,175,0.729,176,0.729,177,0.729,178,1.213,179,1.233,180,0.63,181,0.63,182,0.995,183,0.729,184,0.729,185,0.995,186,0.995,187,0.862,188,0.546,189,0.63,190,0.63,191,0.729,192,0.729,193,0.729,194,0.995,195,0.63,196,1.619,197,0.546,198,1.318,199,0.995,200,0.63,201,0.729,202,1.889,203,0.729,204,0.729,205,0.63,206,0.63,207,0.729,208,0.729,209,0.63,210,1.425,211,0.63,212,0.63,213,0.729,214,0.729,215,0.63,216,0.63,217,0.729,218,0.729,219,0.63,220,0.729,221,0.729,222,1.921,223,0.63,224,0.729,225,0.729,226,1.757,227,2.031,228,1.233,229,1.619,230,1.213,231,1.757,232,1.619,233,0.729,234,0.63,235,0.729,236,0.729,237,1.4,238,1.425,239,1.321,240,0.729,241,0.729,242,0.729,243,1.637,244,0.729,245,0.729,246,0.729,247,0.729,248,2.183,249,2.183,250,0.63,251,0.729,252,0.729,253,1.403,254,1.15,255,0.729,256,0.729,257,1.15,258,1.425,259,2.328,260,0.729,261,1.425,262,1.15,263,0.729,264,1.425,265,0.729,266,1.4,267,0.729,268,0.729,269,0.729,270,0.729,271,0.729,272,0.729,273,1.425,274,0.729,275,0.995,276,1.96,277,1.15,278,0.995,279,1.15,280,0.729,281,1.618,282,0.729,283,0.729,284,0.729,285,0.729,286,0.995,287,0.729,288,0.729,289,0.729,290,0.729,291,0.729,292,0.729,293,1.425,294,1.96,295,1.15,296,0.729,297,1.761,298,1.15,299,0.729,300,1.15,301,0.729,302,1.761,303,1.15,304,0.729,305,1.15,306,1.15,307,0.729,308,0.729,309,0.729,310,0.729,311,0.729,312,1.425,313,1.618,314,0.729,315,0.729,316,0.729,317,0.729,318,0.729,319,0.729,320,0.729,321,0.729,322,0.729,323,0.729,324,0.729,325,0.729,326,0.729,327,0.729,328,0.63,329,1.618,330,1.618,331,1.15,332,0.729,333,1.15,334,1.15,335,1.15,336,1.761,337,1.4,338,1.618,339,1.618,340,0.729,341,2.183,342,0.729,343,0.729,344,0.729,345,0.729,346,1.425,347,0.729,348,1.425,349,0.729,350,0.729,351,0.729,352,0.63,353,1.15,354,1.15,355,1.425,356,0.729,357,0.729,358,0.729,359,0.729,360,0.729,361,0.63,362,0.729,363,0.729,364,0.729,365,0.729,366,0.729,367,0.729,368,1.15,369,0.729,370,0.729,371,0.63,372,0.729,373,0.729,374,0.729,375,0.729,376,0.729,377,0.729,378,0.63,379,0.729,380,0.729,381,0.546,382,0.63,383,0.729,384,0.729,385,2.031,386,0.729,387,0.729,388,0.729,389,0.729,390,0.729,391,0.729,392,0.729,393,1.068,394,0.862,395,0.729,396,0.729,397,0.729,398,0.729,399,0.729,400,1.15,401,0.729,402,0.729,403,0.729,404,0.729,405,1.425,406,0.63,407,0.729,408,1.425,409,1.425,410,1.425,411,1.96,412,1.96,413,1.233,414,1.233,415,0.63,416,0.63,417,0.63,418,1.425,419,0.729,420,1.425,421,1.425,422,0.63,423,0.729,424,0.729,425,0.729,426,1.425,427,1.425,428,1.425,429,0.63,430,0.995,431,0.995,432,0.729]],["title/classes/PointerEventListeners.html",[156,0.533,232,1.139]],["body/classes/PointerEventListeners.html",[0,0.248,1,0.966,3,0.343,4,0.29,5,0.29,10,1.04,11,1.04,12,0.818,13,0.242,14,0.737,15,0.896,16,1.135,17,1.202,18,1.039,19,0.896,20,0.982,21,0.982,22,1.039,23,1.202,26,0.931,27,1.319,28,0.058,30,1.747,32,0.836,33,0.383,34,0.082,35,0.129,36,0.082,37,1.685,38,0.537,39,1.409,40,1.409,41,0.931,42,0.543,43,1.747,44,1.22,45,1.135,46,1.387,47,1.843,48,1.603,49,0.982,50,1.747,51,1.135,52,1.135,53,0.717,54,0.717,55,0.401,56,0.717,57,0.717,58,1.608,59,1.941,60,1.947,61,1.22,62,1.135,63,0.62,64,1.747,65,0.717,66,0.717,67,0.717,68,0.717,69,0.717,70,1.135,71,0.717,72,0.717,73,0.717,74,1.135,75,0.717,76,0.98,77,0.62,78,0.717,79,0.62,80,1.206,81,0.717,82,0.717,83,0.62,84,1.782,85,1.814,86,0.989,87,1.202,88,1.512,89,1.747,90,0.62,91,0.62,92,0.982,93,0.537,94,0.982,95,1.394,96,2.471,97,1.135,98,0.717,99,2.452,100,0.717,101,0.717,102,0.465,103,0.717,104,0.717,105,1.747,106,1.135,107,1.603,108,2.079,109,1.22,110,1.747,111,0.62,112,0.851,113,1.409,114,1.135,115,1.135,116,1.135,117,1.135,118,0.717,119,0.717,120,0.717,121,0.717,122,0.717,123,0.717,124,0.717,125,0.717,126,0.717,127,0.717,128,0.62,129,1.135,130,0.717,131,0.717,132,0.717,133,0.717,134,0.717,135,0.717,136,0.717,137,1.22,138,0.94,139,0.851,140,0.982,141,1.387,142,0.982,143,0.982,144,0.982,145,0.982,146,0.851,147,0.982,148,0.982,149,0.717,150,0.62,151,0.465,152,0.465,153,0.62,154,0.465,155,0.465,156,0.46,157,0.401,158,0.62,159,1.603,160,0.62,161,0.62,162,1.843,163,1.22,164,0.717,165,1.603,166,0.62,167,0.717,168,0.717,169,1.04,170,0.737,171,1.135,172,0.737,173,0.537,174,0.982,175,0.717,176,0.717,177,0.717,178,1.202,179,1.22,180,0.62,181,0.62,182,0.982,183,0.717,184,0.717,185,0.982,186,0.982,187,0.851,188,0.537,189,0.62,190,0.62,191,0.717,192,0.717,193,0.717,194,0.982,195,0.62,196,1.608,197,0.537,198,1.31,199,0.982,200,0.62,201,0.717,202,1.88,203,0.717,204,0.717,205,0.62,206,0.62,207,0.717,208,0.717,209,0.62,210,1.409,211,0.62,212,0.62,213,0.717,214,0.717,215,0.62,216,0.62,217,0.717,218,0.717,219,0.62,220,0.717,221,0.717,222,1.913,223,0.62,224,0.717,225,0.717,226,1.747,227,2.272,228,1.22,229,1.608,230,1.202,231,1.747,232,1.747,233,0.717,234,0.982,235,0.717,236,0.717,237,1.608,238,1.409,239,1.559,240,0.717,241,0.717,242,0.717,243,1.629,244,0.717,245,0.717,246,0.717,247,0.717,248,2.173,249,2.173,250,0.62,251,0.717,252,0.717,253,1.394,254,1.135,255,0.717,256,0.717,257,1.135,258,1.409,259,2.321,260,0.717,261,1.409,262,1.135,263,0.717,264,1.409,265,0.717,266,1.387,267,0.717,268,0.717,269,0.717,270,0.717,271,0.717,272,0.717,273,1.409,274,0.717,275,0.982,276,1.947,277,1.135,278,0.982,279,1.135,280,0.717,281,1.603,282,0.717,283,0.717,284,0.717,285,0.717,286,0.982,287,0.717,288,0.717,289,0.717,290,0.717,291,0.717,292,0.717,293,1.409,294,1.947,295,1.135,296,0.717,297,1.747,298,1.135,299,0.717,300,1.135,301,0.717,302,1.747,303,1.135,304,0.717,305,1.135,306,1.135,307,0.717,308,0.717,309,0.717,310,0.717,311,0.717,312,1.409,313,1.603,314,0.717,315,0.717,316,0.717,317,0.717,318,0.717,319,0.717,320,0.717,321,0.717,322,0.717,323,0.717,324,0.717,325,0.717,326,0.717,327,0.717,328,0.62,329,1.603,330,1.603,331,1.135,332,0.717,333,1.135,334,1.135,335,1.135,336,1.747,337,1.387,338,1.603,339,1.603,340,0.717,341,2.173,342,0.717,343,0.717,344,0.717,345,0.717,346,1.409,347,0.717,348,1.409,349,0.717,350,0.717,351,0.717,352,0.62,353,1.135,354,1.135,355,1.409,356,0.717,357,0.717,358,0.717,359,0.717,360,0.717,361,0.62,362,0.717,363,0.717,364,0.717,365,0.717,366,0.717,367,0.717,368,1.135,369,0.717,370,0.717,371,0.62,372,0.717,373,0.717,374,0.717,375,0.717,376,0.717,377,0.717,378,0.62,379,0.717,380,0.717,381,0.537,382,0.62,383,0.717,384,0.717,385,2.019,386,0.717,387,0.717,388,0.717,389,0.717,390,0.717,391,0.717,392,0.717,393,1.31,394,0.851,395,0.717,396,0.717,397,1.409,398,1.409,399,1.409,400,1.603,401,0.717,402,0.717,403,0.717,404,1.409,405,1.409,406,0.982,407,0.717,408,1.409,409,1.409,410,1.409,411,1.947,412,1.947,413,1.22,414,1.22,415,0.62,416,0.62,417,0.62,418,1.409,419,0.717,420,1.409,421,1.409,422,0.62,423,0.717,424,0.717,425,0.717,426,1.409,427,1.409,428,1.409,429,0.62,430,0.982,431,0.982,432,0.717,436,1.173,437,2.325,438,1.468,439,1.549,440,1.468,441,1.468,442,1.468,443,1.468,444,1.468,445,1.173]],["title/directives/ResizableDirective.html",[42,0.63,157,0.736]],["body/directives/ResizableDirective.html",[0,0.235,1,0.943,3,0.321,4,0.272,5,0.272,8,0.67,10,1.001,11,1.279,12,0.894,13,0.226,15,0.945,17,1.157,18,1.102,19,1.009,20,0.931,21,0.931,22,1.102,23,1.157,26,0.907,27,1.322,28,0.058,30,2.172,32,1.039,33,0.363,37,1.641,38,0.503,39,1.348,40,1.348,41,0.907,42,0.515,43,1.335,44,1.167,45,1.348,46,1.335,47,1.806,48,1.896,49,1.167,50,1.335,51,1.348,52,1.076,53,0.67,54,0.67,55,0.375,56,0.67,57,0.67,58,1.561,59,1.806,60,1.896,61,1.167,62,1.076,63,0.58,64,1.69,65,0.67,66,0.67,67,0.67,68,0.67,69,0.67,70,1.076,71,0.67,72,0.67,73,0.67,74,1.076,75,0.67,76,0.992,77,0.58,78,0.67,79,0.58,80,1.32,81,0.67,82,0.67,83,0.58,84,1.761,85,1.795,86,1.008,87,1.157,88,1.462,89,1.896,90,0.58,91,0.58,92,0.931,93,0.503,94,1.167,95,1.478,96,2.449,97,1.076,98,0.67,99,2.439,100,0.67,101,0.67,102,1.32,103,0.67,104,0.67,105,1.69,106,1.076,107,1.543,108,2.034,109,1.167,110,1.69,111,0.58,112,1.157,113,1.69,114,1.076,115,1.076,116,1.076,117,1.076,118,0.67,119,0.67,120,0.67,121,0.67,122,0.67,123,0.67,124,0.67,125,0.67,126,0.67,127,0.67,128,0.58,129,1.076,130,0.67,131,0.67,132,0.67,133,0.67,134,0.67,135,0.67,136,0.67,137,1.167,138,0.975,139,1.011,140,0.931,141,1.335,142,0.931,143,0.931,144,0.931,145,0.931,146,1.011,147,1.167,148,1.167,149,1.076,150,0.931,151,0.698,152,0.698,153,0.931,154,0.698,155,0.875,156,0.436,157,0.602,158,0.931,159,1.971,160,0.931,161,0.931,162,1.999,163,1.561,164,1.076,165,1.971,166,0.931,167,1.348,168,1.076,169,1.279,170,1.409,171,1.076,172,0.698,173,0.503,174,0.931,175,0.67,176,0.67,177,0.67,178,1.353,179,1.561,180,0.931,181,0.931,182,1.462,183,1.076,184,1.076,185,1.462,186,1.462,187,1.157,188,1.011,189,0.931,190,0.931,191,1.076,192,1.076,193,1.076,194,1.335,195,1.167,196,1.879,197,0.807,198,1.384,199,1.167,200,0.931,201,1.076,202,1.879,203,0.67,204,0.67,205,0.58,206,0.58,207,1.348,208,1.076,209,0.931,210,1.805,211,0.931,212,0.931,213,1.076,214,1.348,215,0.931,216,0.931,217,1.076,218,1.076,219,1.167,220,1.076,221,1.076,222,1.879,223,0.931,224,1.076,225,1.076,226,1.706,227,1.971,228,1.167,229,1.561,230,1.157,231,1.706,232,1.561,233,0.67,234,0.58,235,0.67,236,0.67,237,1.335,238,1.348,239,1.267,240,0.67,241,0.67,242,0.67,243,1.599,244,0.67,245,0.67,246,0.67,247,0.67,248,2.132,249,2.132,250,0.58,251,0.67,252,0.67,253,1.353,254,1.076,255,0.67,256,0.67,257,1.076,258,1.348,259,2.288,260,0.67,261,1.348,262,1.076,263,0.67,264,1.348,265,0.67,266,1.335,267,0.67,268,0.67,269,0.67,270,0.67,271,0.67,272,0.67,273,1.348,274,0.67,275,0.931,276,1.896,277,1.076,278,0.931,279,1.076,280,0.67,281,1.543,282,0.67,283,0.67,284,0.67,285,0.67,286,0.931,287,0.67,288,0.67,289,0.67,290,0.67,291,0.67,292,0.67,293,1.348,294,1.896,295,1.076,296,0.67,297,1.69,298,1.076,299,0.67,300,1.076,301,0.67,302,1.69,303,1.076,304,0.67,305,1.076,306,1.076,307,0.67,308,0.67,309,0.67,310,0.67,311,0.67,312,1.348,313,1.543,314,0.67,315,0.67,316,0.67,317,0.67,318,0.67,319,0.67,320,0.67,321,0.67,322,0.67,323,0.67,324,0.67,325,0.67,326,0.67,327,0.67,328,0.58,329,1.543,330,1.543,331,1.076,332,0.67,333,1.076,334,1.076,335,1.076,336,1.69,337,1.335,338,1.543,339,1.543,340,0.67,341,2.132,342,0.67,343,0.67,344,0.67,345,0.67,346,1.348,347,0.67,348,1.348,349,0.67,350,0.67,351,0.67,352,0.58,353,1.076,354,1.076,355,1.348,356,0.67,357,0.67,358,0.67,359,0.67,360,0.67,361,0.58,362,0.67,363,0.67,364,0.67,365,0.67,366,0.67,367,0.67,368,1.076,369,0.67,370,0.67,371,0.58,372,0.67,373,0.67,374,0.67,375,0.67,376,0.67,377,0.67,378,0.58,379,0.67,380,0.67,381,0.503,382,0.58,383,0.67,384,0.67,385,1.971,386,0.67,387,0.67,388,0.67,389,0.67,390,0.67,391,0.67,392,0.67,393,1.011,394,0.807,395,0.67,396,0.67,397,0.67,398,0.67,399,0.67,400,1.076,401,0.67,402,0.67,403,0.67,404,0.67,405,1.348,406,0.58,407,0.67,408,1.348,409,1.348,410,1.348,411,1.896,412,1.896,413,1.167,414,1.167,415,0.58,416,0.58,417,0.58,418,1.348,419,0.67,420,1.348,421,1.348,422,0.58,423,0.67,424,0.67,425,0.67,426,1.348,427,1.348,428,1.348,429,0.58,430,0.931,431,0.931,432,0.67,446,0.779,447,1.373,448,1.373,449,1.097,450,1.761,451,1.761,452,1.373,453,1.373,454,1.373,455,1.373,456,1.373,457,1.373,458,1.373,459,1.373,460,1.373,461,1.373,462,1.373,463,1.373]],["title/modules/ResizableModule.html",[464,1.797,465,1.317]],["body/modules/ResizableModule.html",[3,0.954,4,0.807,5,0.807,28,0.057,33,0.673,34,0.227,35,0.262,36,0.227,41,1.162,55,1.115,138,0.807,156,0.807,157,1.42,465,2.303,466,2.72,467,4.083,468,3.768,469,2.952,470,4.718,471,3.768,472,3.261,473,4.083]],["title/interfaces/ResizeCursors.html",[0,0.287,198,0.854]],["body/interfaces/ResizeCursors.html",[0,0.249,1,0.969,2,0.47,3,0.346,4,0.293,5,0.293,10,1.046,11,1.046,12,0.821,13,0.244,14,0.742,15,0.901,17,1.209,18,1.044,19,0.901,20,0.99,21,0.99,22,1.044,23,1.209,26,1.139,27,1.322,28,0.058,32,0.893,33,0.386,34,0.082,35,0.13,36,0.082,37,1.691,38,0.543,39,1.419,40,1.419,41,0.935,42,0.547,43,1.395,44,1.227,45,1.144,46,1.395,47,1.848,48,1.612,49,0.99,50,1.395,51,1.144,52,1.144,53,0.724,54,0.724,55,0.405,56,0.724,57,0.724,58,1.615,59,1.848,60,1.954,61,1.227,62,1.144,63,0.626,64,1.755,65,0.724,66,0.724,67,0.724,68,0.724,69,0.724,70,1.144,71,0.724,72,0.724,73,0.724,74,1.144,75,0.724,76,0.981,77,0.626,78,0.724,79,0.626,80,1.211,81,0.724,82,0.724,83,0.626,84,1.785,85,1.816,86,0.99,87,1.209,88,1.519,89,1.755,90,0.626,91,0.626,92,0.99,93,0.543,94,0.99,95,1.399,96,2.474,97,1.144,98,0.724,99,2.455,100,0.724,101,0.724,102,0.47,103,0.724,104,0.724,105,1.755,106,1.144,107,1.612,108,2.086,109,1.227,110,1.755,111,0.626,112,0.858,113,1.419,114,1.144,115,1.144,116,1.144,117,1.144,118,0.724,119,0.724,120,0.724,121,0.724,122,0.724,123,0.724,124,0.724,125,0.724,126,0.724,127,0.724,128,0.626,129,1.144,130,0.724,131,0.724,132,0.724,133,0.724,134,0.724,135,0.724,136,0.724,137,1.227,138,0.942,139,0.858,140,0.99,141,1.395,142,0.99,143,0.99,144,0.99,145,0.99,146,0.858,147,0.99,148,0.99,149,0.724,150,0.626,151,0.47,152,0.47,153,0.626,154,0.47,155,0.47,156,0.463,157,0.405,158,0.626,159,1.612,160,0.626,161,0.626,162,1.848,163,1.227,164,0.724,165,1.612,166,0.626,167,0.724,168,0.724,169,1.046,170,0.742,171,1.144,172,0.742,173,0.543,174,0.99,175,0.724,176,0.724,177,0.724,178,1.209,179,1.227,180,0.626,181,0.626,182,0.99,183,0.724,184,0.724,185,0.99,186,0.99,187,0.858,188,0.543,189,0.626,190,0.626,191,0.724,192,0.724,193,0.724,194,0.99,195,0.626,196,1.615,197,0.543,198,1.353,199,0.99,200,0.626,201,0.724,202,1.885,203,0.724,204,0.724,205,0.626,206,0.626,207,0.724,208,0.724,209,0.626,210,1.419,211,0.626,212,0.626,213,0.724,214,0.724,215,0.626,216,0.626,217,0.724,218,0.724,219,0.626,220,0.724,221,0.724,222,1.918,223,0.626,224,0.724,225,0.724,226,1.753,227,2.026,228,1.227,229,1.615,230,1.209,231,1.753,232,1.615,233,0.724,234,0.626,235,0.724,236,0.724,237,1.395,238,1.419,239,1.316,240,0.724,241,0.724,242,0.724,243,1.634,244,0.724,245,0.724,246,0.724,247,0.724,248,2.179,249,2.179,250,0.626,251,0.724,252,0.724,253,1.399,254,1.144,255,0.724,256,0.724,257,1.144,258,1.419,259,2.325,260,0.724,261,1.419,262,1.144,263,0.724,264,1.419,265,0.724,266,1.395,267,0.724,268,0.724,269,0.724,270,0.724,271,0.724,272,0.724,273,1.419,274,0.724,275,0.99,276,1.954,277,1.144,278,0.99,279,1.144,280,0.724,281,1.612,282,0.724,283,0.724,284,0.724,285,0.724,286,0.99,287,0.724,288,0.724,289,0.724,290,0.724,291,0.724,292,0.724,293,1.419,294,1.954,295,1.144,296,0.724,297,1.755,298,1.144,299,0.724,300,1.144,301,0.724,302,1.755,303,1.144,304,0.724,305,1.144,306,1.144,307,0.724,308,0.724,309,0.724,310,0.724,311,0.724,312,1.419,313,1.612,314,0.724,315,0.724,316,0.724,317,0.724,318,0.724,319,0.724,320,0.724,321,0.724,322,0.724,323,0.724,324,0.724,325,0.724,326,0.724,327,0.724,328,0.626,329,1.612,330,1.612,331,1.144,332,0.724,333,1.144,334,1.144,335,1.144,336,1.755,337,1.395,338,1.612,339,1.612,340,0.724,341,2.179,342,0.724,343,0.724,344,0.724,345,0.724,346,1.419,347,0.724,348,1.419,349,0.724,350,0.724,351,0.724,352,0.626,353,1.144,354,1.144,355,1.419,356,0.724,357,0.724,358,0.724,359,0.724,360,0.724,361,0.626,362,0.724,363,0.724,364,0.724,365,0.724,366,0.724,367,0.724,368,1.144,369,0.724,370,0.724,371,0.626,372,0.724,373,0.724,374,0.724,375,0.724,376,0.724,377,0.724,378,0.626,379,0.724,380,0.724,381,0.543,382,0.626,383,0.724,384,0.724,385,2.026,386,0.724,387,0.724,388,0.724,389,0.724,390,0.724,391,0.724,392,0.724,393,1.064,394,0.858,395,0.724,396,0.724,397,0.724,398,0.724,399,0.724,400,1.144,401,0.724,402,0.724,403,0.724,404,0.724,405,1.419,406,0.626,407,0.724,408,1.419,409,1.419,410,1.419,411,1.954,412,1.954,413,1.227,414,1.227,415,0.626,416,0.626,417,0.626,418,1.419,419,0.724,420,1.419,421,1.419,422,0.626,423,0.724,424,0.724,425,0.724,426,1.419,427,1.419,428,1.419,429,0.626,430,0.99,431,0.99,432,0.724,474,2.321,475,2.321,476,2.321,477,2.321,478,2.321,479,2.321]],["title/interfaces/ResizeEvent.html",[0,0.287,80,0.854]],["body/interfaces/ResizeEvent.html",[0,0.426,1,1.188,2,1.269,3,0.936,4,0.792,5,0.792,8,1.955,9,2.668,10,1.611,13,0.66,14,1.478,28,0.057,32,1.09,33,0.66,34,0.223,35,0.259,36,0.223,41,1.09,76,1.053,79,1.692,80,1.478,86,0.923,138,0.923,169,1.478,187,1.708,480,4.005,481,4.005,482,4.665,483,4.005]],["title/directives/ResizeHandleDirective.html",[42,0.63,469,1.53]],["body/directives/ResizeHandleDirective.html",[3,0.709,4,0.6,5,0.6,8,1.481,12,0.986,13,0.5,16,1.481,25,2.021,26,0.709,27,1.407,28,0.058,29,2.021,30,2.253,32,0.918,33,0.5,41,1.019,42,1.078,43,1.95,44,1.95,47,1.661,49,1.843,50,1.95,55,0.828,76,1.019,77,1.281,84,1.793,85,1.85,86,0.969,87,1.69,88,1.95,102,0.961,138,0.913,151,1.382,152,1.246,153,1.661,154,1.246,155,1.246,156,0.6,157,1.26,158,1.661,169,1.246,170,0.961,173,1.69,178,1.597,226,1.661,230,1.439,231,2.107,234,1.661,237,1.661,239,1.597,243,1.85,250,1.281,266,1.843,378,1.281,393,1.11,406,1.281,413,1.661,414,1.661,415,1.661,416,1.661,417,1.661,422,1.661,429,1.661,430,1.843,431,1.843,439,2.021,446,1.721,449,2.423,450,3.141,469,2.23,472,2.423,484,4.781,485,3.033,486,3.932,487,3.141,488,3.932,489,3.141,490,3.141,491,3.932,492,3.033,493,3.033,494,3.932,495,3.932,496,3.141,497,3.932,498,3.932,499,3.033,500,3.033,501,3.033,502,3.033,503,3.033,504,3.033,505,3.932,506,3.033,507,3.033,508,3.033,509,3.932,510,3.932,511,3.932,512,3.932,513,3.932,514,3.932,515,3.033,516,3.033,517,3.932,518,3.932,519,3.033,520,3.033,521,3.033,522,3.033,523,3.033,524,3.033,525,3.033,526,3.033,527,3.033,528,3.033,529,3.033,530,3.033,531,3.033,532,3.033,533,3.033]],["title/changelog.html",[534,1.515,535,1.515,536,2.273]],["body/changelog.html",[1,0.65,2,0.587,5,0.367,9,1.855,10,1.059,11,0.882,12,0.999,14,0.587,15,0.506,17,1.019,18,0.506,19,0.506,22,0.506,23,1.019,28,0.029,33,0.551,34,0.103,35,0.155,36,0.103,41,0.781,42,0.868,46,1.57,59,1.176,63,1.885,76,0.661,86,0.858,87,0.679,93,0.679,94,0.783,102,0.587,112,0.679,138,0.999,139,0.679,146,1.36,150,1.176,151,1.615,152,0.587,154,0.587,155,0.587,156,0.367,157,0.506,160,0.783,161,0.783,162,1.57,163,2.081,166,1.176,169,0.587,170,1.262,172,1.496,173,1.224,174,1.682,178,1.224,179,1.176,180,0.783,181,0.783,182,2.043,185,0.783,186,0.783,187,1.702,188,0.679,189,0.783,190,0.783,194,1.833,195,0.783,196,1.767,197,1.019,198,0.587,200,0.783,202,1.964,205,1.682,206,0.783,209,0.783,211,1.57,212,0.783,215,1.412,216,0.783,219,0.783,222,0.783,228,0.783,229,1.176,230,1.019,239,1.019,253,0.679,278,0.783,286,1.412,361,0.783,381,1.866,382,1.176,394,1.531,436,1.481,446,1.896,451,2.67,465,0.905,469,1.052,487,1.481,489,2.968,490,1.481,496,2.67,537,3.343,538,1.854,539,1.854,540,4.565,541,1.854,542,1.854,543,2.224,544,1.854,545,2.784,546,1.854,547,1.854,548,1.854,549,3.343,550,4.338,551,3.343,552,5.265,553,5.265,554,1.481,555,2.968,556,1.854,557,1.854,558,1.854,559,3.343,560,1.854,561,5.255,562,1.854,563,1.854,564,3.716,565,1.854,566,4.994,567,2.784,568,1.854,569,1.854,570,1.854,571,3.716,572,4.463,573,2.784,574,2.968,575,3.716,576,1.854,577,1.854,578,3.716,579,3.716,580,3.716,581,1.854,582,1.854,583,3.343,584,1.854,585,1.854,586,1.854,587,1.854,588,3.982,589,3.982,590,1.854,591,2.784,592,1.854,593,1.854,594,1.854,595,2.784,596,1.854,597,1.854,598,1.854,599,1.481,600,1.854,601,1.854,602,2.784,603,1.854,604,1.854,605,1.854,606,3.982,607,4.182,608,1.854,609,1.854,610,1.854,611,1.854,612,1.854,613,2.784,614,2.224,615,1.854,616,1.854,617,4.338,618,3.343,619,1.854,620,1.854,621,1.854,622,1.854,623,2.784,624,1.854,625,1.854,626,4.463,627,2.784,628,2.784,629,1.854,630,1.854,631,4.182,632,3.982,633,1.854,634,4.463,635,3.716,636,3.901,637,3.181,638,2.968,639,1.854,640,5.075,641,4.338,642,3.343,643,1.854,644,1.854,645,3.716,646,1.854,647,1.854,648,3.343,649,1.854,650,1.854,651,1.854,652,1.854,653,1.854,654,1.854,655,1.854,656,1.854,657,1.854,658,3.716,659,1.854,660,1.854,661,1.854,662,3.982,663,3.343,664,2.784,665,2.784,666,3.716,667,2.784,668,2.784,669,1.854,670,1.854,671,2.784,672,3.716,673,1.854,674,1.854,675,1.854,676,3.982,677,1.854,678,2.784,679,1.854,680,1.854,681,1.854,682,1.854,683,1.854,684,1.854,685,1.854,686,1.854,687,1.854,688,1.854,689,3.343,690,1.854,691,1.854,692,1.854,693,2.784,694,2.784,695,1.854,696,1.854,697,1.854,698,1.854,699,1.854,700,2.784,701,1.854,702,1.854,703,1.854,704,2.784,705,1.854,706,1.854,707,1.854,708,1.854,709,2.224,710,1.854,711,1.854,712,1.854,713,1.854,714,3.343,715,1.854,716,1.854,717,1.854,718,1.854,719,1.481,720,1.854,721,1.854,722,1.854,723,1.854,724,1.854,725,2.784,726,2.784,727,3.343,728,1.854,729,1.854,730,1.854,731,1.854,732,2.784,733,1.854,734,1.854,735,1.854,736,1.854,737,1.854,738,2.784,739,1.854,740,1.854,741,2.784,742,1.854,743,1.854,744,2.784,745,1.854,746,1.854,747,1.854,748,1.481,749,2.784,750,1.854,751,2.784,752,1.854,753,1.854,754,1.854,755,1.854,756,1.854,757,1.854,758,1.854,759,1.854,760,1.854,761,1.854,762,1.854,763,1.854,764,2.784,765,1.854,766,1.854,767,1.854,768,2.784,769,1.854,770,1.854,771,1.854,772,1.854,773,2.784,774,2.784,775,1.854,776,1.854,777,1.854,778,3.343,779,1.854,780,1.854,781,1.854,782,1.854,783,1.854,784,1.854,785,1.854,786,1.854,787,1.854,788,3.989,789,2.784,790,1.481,791,1.854,792,1.854,793,1.854,794,1.854,795,1.854,796,1.854,797,1.854,798,1.854,799,2.784,800,1.854,801,1.854,802,3.343,803,1.854,804,1.854,805,1.854,806,1.854,807,1.854,808,2.784,809,1.854,810,1.854,811,1.854,812,1.854,813,3.716,814,1.854,815,1.854,816,1.854,817,1.854,818,4.182,819,1.854,820,1.854,821,1.854,822,1.854,823,1.854,824,1.854,825,1.854,826,1.854,827,1.854,828,1.854,829,2.784,830,3.982,831,1.854,832,1.481,833,1.854,834,1.854,835,1.854,836,1.481,837,2.784,838,1.854,839,1.854,840,1.854,841,1.854,842,1.854,843,3.982,844,1.854,845,1.854,846,1.854,847,3.343,848,1.854,849,1.854,850,1.854,851,1.854,852,1.854,853,1.854,854,1.481,855,1.854,856,1.854,857,1.854,858,1.854,859,1.854,860,1.854,861,1.854,862,1.854,863,2.784,864,1.854,865,1.854,866,1.854,867,4.182,868,1.854,869,1.854,870,2.67,871,1.481,872,2.784,873,1.854,874,2.784,875,1.854,876,3.343,877,1.854,878,1.854,879,1.854,880,1.854,881,1.854,882,1.854,883,1.854,884,1.854,885,1.854,886,3.343,887,1.854,888,2.784,889,2.784,890,1.854,891,1.854,892,1.854,893,1.854,894,1.854,895,1.854,896,1.854,897,1.854,898,1.854,899,1.854,900,1.854,901,1.854,902,1.854,903,2.784,904,1.854,905,1.854,906,1.854,907,1.854,908,2.784,909,1.854,910,1.854,911,1.854,912,1.854,913,1.854,914,1.854,915,2.784,916,1.854,917,1.854,918,1.854,919,1.854,920,1.854,921,1.854,922,1.854,923,1.854,924,1.854,925,1.854,926,1.854,927,1.854,928,1.854,929,1.854,930,1.854,931,2.224,932,1.854,933,1.854,934,1.854,935,1.854,936,1.854,937,1.854,938,1.854,939,1.854,940,1.854,941,1.854,942,1.854,943,1.854,944,2.784,945,1.854,946,1.854,947,3.343,948,1.854,949,1.854,950,1.854,951,1.854,952,1.854,953,1.854,954,1.854,955,1.854,956,1.854,957,1.854,958,1.854,959,1.854,960,1.854,961,1.854,962,1.854,963,1.854,964,1.854,965,1.854,966,1.854,967,1.854,968,1.854,969,1.854,970,1.854,971,1.854,972,1.854,973,1.854,974,1.854]],["title/dependencies.html",[638,1.816,975,2.153]],["body/dependencies.html",[28,0.053,34,0.236,35,0.268,36,0.236,55,1.159,574,3.39,975,2.827,976,4.244]],["title/miscellaneous/functions.html",[977,1.29,978,2.581]],["body/miscellaneous/functions.html",[1,1.056,12,0.751,13,0.626,16,2.575,26,0.887,28,0.057,34,0.211,35,0.251,36,0.211,38,1.39,76,1.009,84,1.655,85,1.655,90,1.91,91,1.604,92,1.91,93,1.655,95,1.767,112,1.655,128,1.91,197,1.655,253,1.39,275,1.91,328,1.91,337,1.91,352,1.91,371,1.604,393,1.931,439,3.514,445,4.214,977,2.153,978,3.032,979,4.214,980,4.52,981,4.52,982,3.796,983,3.796,984,3.796,985,3.796,986,3.796,987,3.796,988,3.796]],["title/index.html",[13,0.375,534,1.515,535,1.515]],["body/index.html",[4,0.855,11,1.37,12,0.989,28,0.057,33,0.582,34,0.196,35,0.24,36,0.196,41,1.139,42,0.824,55,1.181,80,1.37,86,0.698,151,1.613,152,1.118,154,1.118,155,1.118,156,0.855,172,1.37,188,1.292,223,1.491,243,1.292,381,1.832,394,1.292,464,2.352,465,2.112,468,2.819,471,3.455,543,2.819,599,2.819,614,3.455,636,2.819,637,2.819,709,2.819,719,3.455,748,4.067,790,3.455,832,2.819,854,2.819,870,3.895,871,3.455,931,3.455,975,2.352,989,4.326,990,3.529,991,3.529,992,3.529,993,4.326,994,3.736,995,4.876,996,2.352,997,3.529,998,3.529,999,5.003,1000,3.529,1001,5.207,1002,3.529,1003,3.529,1004,4.326,1005,3.529,1006,3.529,1007,2.819,1008,4.326,1009,3.529,1010,3.529,1011,3.529,1012,4.677,1013,3.529,1014,3.529,1015,3.529,1016,3.529,1017,3.529,1018,3.529,1019,3.529,1020,3.529,1021,3.529,1022,3.529,1023,3.529,1024,3.529,1025,3.529,1026,3.529,1027,3.529,1028,3.529,1029,3.529,1030,3.529,1031,3.529,1032,3.529,1033,3.529,1034,4.326,1035,3.529,1036,3.529,1037,3.529,1038,4.677,1039,3.529,1040,3.529,1041,3.529,1042,3.529,1043,3.529,1044,3.529,1045,3.529,1046,2.819]],["title/license.html",[534,1.515,535,1.515,996,1.515]],["body/license.html",[28,0.048,34,0.214,35,0.254,36,0.214,58,1.63,61,1.63,86,0.763,172,1.446,554,3.082,788,3.082,836,3.082,994,3.082,996,2.57,1007,3.082,1046,3.645,1047,4.86,1048,3.858,1049,3.858,1050,3.858,1051,4.564,1052,3.858,1053,3.858,1054,3.858,1055,3.858,1056,3.858,1057,3.858,1058,4.564,1059,5.321,1060,3.858,1061,3.858,1062,4.86,1063,3.858,1064,4.564,1065,3.858,1066,3.858,1067,3.858,1068,3.858,1069,3.858,1070,3.858,1071,3.858,1072,3.858,1073,4.564,1074,3.858,1075,3.858,1076,3.858,1077,3.858,1078,3.858,1079,4.564,1080,4.564,1081,3.858,1082,3.858,1083,3.858,1084,3.858,1085,3.858,1086,3.858,1087,3.858,1088,3.858,1089,3.858,1090,3.858,1091,3.858,1092,3.858,1093,3.858,1094,3.858,1095,3.858,1096,3.858,1097,3.858,1098,3.858,1099,3.858,1100,3.858,1101,3.858,1102,3.858,1103,3.858,1104,3.858,1105,3.858,1106,3.858,1107,3.858,1108,3.858,1109,3.858]],["title/modules.html",[466,2.423]],["body/modules.html",[28,0.051,34,0.236,35,0.268,36,0.236,465,2.077,466,2.834,1110,4.253]],["title/overview.html",[1111,2.905]],["body/overview.html",[2,1.338,28,0.051,34,0.235,35,0.267,36,0.235,109,2.032,111,1.785,156,0.835,446,2.397,464,2.815,555,3.375,1111,3.375]],["title/miscellaneous/variables.html",[977,1.29,1112,2.581]],["body/miscellaneous/variables.html",[12,0.748,13,0.623,15,1.032,18,1.032,19,1.032,22,1.032,26,1.209,27,1.032,28,0.057,32,1.231,34,0.21,35,0.251,36,0.21,38,1.384,102,1.67,137,1.905,138,1.062,139,1.384,140,1.905,141,2.108,142,1.905,143,1.905,144,1.905,145,1.905,146,1.384,147,1.905,148,1.597,170,1.67,198,1.198,199,1.905,474,3.02,475,3.02,476,3.02,477,3.02,478,3.02,479,3.02,977,2.145,979,4.211,1112,3.02,1113,3.78,1114,3.78,1115,3.78,1116,3.78,1117,3.78,1118,3.78,1119,3.78]]],"invertedIndex":[["",{"_index":28,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":108,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["0.0.1",{"_index":951,"title":{},"body":{"changelog.html":{}}}],["0.0.2",{"_index":946,"title":{},"body":{"changelog.html":{}}}],["0.0.3",{"_index":943,"title":{},"body":{"changelog.html":{}}}],["0.1.0",{"_index":887,"title":{},"body":{"changelog.html":{}}}],["0.2.0",{"_index":879,"title":{},"body":{"changelog.html":{}}}],["0.2.1",{"_index":875,"title":{},"body":{"changelog.html":{}}}],["0.3.0",{"_index":857,"title":{},"body":{"changelog.html":{}}}],["0.3.1",{"_index":852,"title":{},"body":{"changelog.html":{}}}],["0.3.2",{"_index":849,"title":{},"body":{"changelog.html":{}}}],["0.3.3",{"_index":842,"title":{},"body":{"changelog.html":{}}}],["0.4.0",{"_index":828,"title":{},"body":{"changelog.html":{}}}],["0.4.1",{"_index":822,"title":{},"body":{"changelog.html":{}}}],["0.5.0",{"_index":804,"title":{},"body":{"changelog.html":{}}}],["0.5.1",{"_index":801,"title":{},"body":{"changelog.html":{}}}],["0.5.2",{"_index":798,"title":{},"body":{"changelog.html":{}}}],["0.5.3",{"_index":792,"title":{},"body":{"changelog.html":{}}}],["0.5.4",{"_index":787,"title":{},"body":{"changelog.html":{}}}],["0.5.5",{"_index":781,"title":{},"body":{"changelog.html":{}}}],["0.5.6",{"_index":777,"title":{},"body":{"changelog.html":{}}}],["0.5.7",{"_index":771,"title":{},"body":{"changelog.html":{}}}],["0.6.0",{"_index":767,"title":{},"body":{"changelog.html":{}}}],["0.6.1",{"_index":763,"title":{},"body":{"changelog.html":{}}}],["0.7.0",{"_index":754,"title":{},"body":{"changelog.html":{}}}],["0.7.2",{"_index":743,"title":{},"body":{"changelog.html":{}}}],["0.8.0",{"_index":737,"title":{},"body":{"changelog.html":{}}}],["0.8.1",{"_index":731,"title":{},"body":{"changelog.html":{}}}],["01",{"_index":564,"title":{},"body":{"changelog.html":{}}}],["02",{"_index":588,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":617,"title":{},"body":{"changelog.html":{}}}],["032ea5a",{"_index":962,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":744,"title":{},"body":{"changelog.html":{}}}],["0440bbd",{"_index":644,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":550,"title":{},"body":{"changelog.html":{}}}],["053fb0e",{"_index":956,"title":{},"body":{"changelog.html":{}}}],["05f7f7e",{"_index":733,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":626,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":578,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":607,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":631,"title":{},"body":{"changelog.html":{}}}],["0959a12",{"_index":965,"title":{},"body":{"changelog.html":{}}}],["0a5bf11",{"_index":878,"title":{},"body":{"changelog.html":{}}}],["0ab7d40",{"_index":775,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":109,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"overview.html":{}}}],["1.0.0",{"_index":724,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":722,"title":{},"body":{"changelog.html":{}}}],["1.1.1",{"_index":718,"title":{},"body":{"changelog.html":{}}}],["1.1.2",{"_index":712,"title":{},"body":{"changelog.html":{}}}],["1.2.0",{"_index":708,"title":{},"body":{"changelog.html":{}}}],["1.2.1",{"_index":703,"title":{},"body":{"changelog.html":{}}}],["1.2.2",{"_index":697,"title":{},"body":{"changelog.html":{}}}],["1.2.3",{"_index":691,"title":{},"body":{"changelog.html":{}}}],["1.2.4",{"_index":688,"title":{},"body":{"changelog.html":{}}}],["1.2.5",{"_index":677,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":194,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["100",{"_index":562,"title":{},"body":{"changelog.html":{}}}],["10051cd",{"_index":711,"title":{},"body":{"changelog.html":{}}}],["106",{"_index":568,"title":{},"body":{"changelog.html":{}}}],["10px",{"_index":193,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["11",{"_index":572,"title":{},"body":{"changelog.html":{}}}],["1185f3a",{"_index":604,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":641,"title":{},"body":{"changelog.html":{}}}],["13",{"_index":843,"title":{},"body":{"changelog.html":{}}}],["14",{"_index":565,"title":{},"body":{"changelog.html":{}}}],["149c1a4",{"_index":890,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":876,"title":{},"body":{"changelog.html":{}}}],["16",{"_index":738,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":627,"title":{},"body":{"changelog.html":{}}}],["1af705a",{"_index":923,"title":{},"body":{"changelog.html":{}}}],["1d15bb4",{"_index":716,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":111,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"overview.html":{}}}],["2.0.0",{"_index":639,"title":{},"body":{"changelog.html":{}}}],["20",{"_index":817,"title":{},"body":{"changelog.html":{}}}],["2016",{"_index":788,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2017",{"_index":640,"title":{},"body":{"changelog.html":{}}}],["2018",{"_index":606,"title":{},"body":{"changelog.html":{}}}],["2019",{"_index":571,"title":{},"body":{"changelog.html":{}}}],["2020",{"_index":549,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":689,"title":{},"body":{"changelog.html":{}}}],["210decc",{"_index":592,"title":{},"body":{"changelog.html":{}}}],["22",{"_index":551,"title":{},"body":{"changelog.html":{}}}],["22af52f",{"_index":969,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":623,"title":{},"body":{"changelog.html":{}}}],["23fc6e5",{"_index":701,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":725,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":778,"title":{},"body":{"changelog.html":{}}}],["25cfe50",{"_index":690,"title":{},"body":{"changelog.html":{}}}],["25d6fa3",{"_index":621,"title":{},"body":{"changelog.html":{}}}],["26",{"_index":642,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":797,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":589,"title":{},"body":{"changelog.html":{}}}],["29",{"_index":805,"title":{},"body":{"changelog.html":{}}}],["2a4b102",{"_index":736,"title":{},"body":{"changelog.html":{}}}],["2f6ac2d",{"_index":601,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":94,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["3.0.0",{"_index":630,"title":{},"body":{"changelog.html":{}}}],["3.1.0",{"_index":625,"title":{},"body":{"changelog.html":{}}}],["3.2.0",{"_index":622,"title":{},"body":{"changelog.html":{}}}],["3.2.1",{"_index":616,"title":{},"body":{"changelog.html":{}}}],["3.2.2",{"_index":605,"title":{},"body":{"changelog.html":{}}}],["3.2.3",{"_index":594,"title":{},"body":{"changelog.html":{}}}],["3.2.4",{"_index":587,"title":{},"body":{"changelog.html":{}}}],["3.2.5",{"_index":577,"title":{},"body":{"changelog.html":{}}}],["3.2.6",{"_index":570,"title":{},"body":{"changelog.html":{}}}],["3.3.0",{"_index":563,"title":{},"body":{"changelog.html":{}}}],["3.3.1",{"_index":557,"title":{},"body":{"changelog.html":{}}}],["3.3.2",{"_index":548,"title":{},"body":{"changelog.html":{}}}],["30",{"_index":772,"title":{},"body":{"changelog.html":{}}}],["300ac10",{"_index":945,"title":{},"body":{"changelog.html":{}}}],["31",{"_index":783,"title":{},"body":{"changelog.html":{}}}],["33",{"_index":786,"title":{},"body":{"changelog.html":{}}}],["34342aa",{"_index":680,"title":{},"body":{"changelog.html":{}}}],["36",{"_index":780,"title":{},"body":{"changelog.html":{}}}],["3633040",{"_index":742,"title":{},"body":{"changelog.html":{}}}],["37fc88e",{"_index":629,"title":{},"body":{"changelog.html":{}}}],["39",{"_index":776,"title":{},"body":{"changelog.html":{}}}],["3ce508d",{"_index":762,"title":{},"body":{"changelog.html":{}}}],["4",{"_index":727,"title":{},"body":{"changelog.html":{}}}],["4.0",{"_index":729,"title":{},"body":{"changelog.html":{}}}],["40",{"_index":770,"title":{},"body":{"changelog.html":{}}}],["41",{"_index":766,"title":{},"body":{"changelog.html":{}}}],["4b20cde",{"_index":753,"title":{},"body":{"changelog.html":{}}}],["4c59b05",{"_index":919,"title":{},"body":{"changelog.html":{}}}],["4c665d2",{"_index":728,"title":{},"body":{"changelog.html":{}}}],["4da938d",{"_index":930,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":645,"title":{},"body":{"changelog.html":{}}}],["5.5",{"_index":661,"title":{},"body":{"changelog.html":{}}}],["50",{"_index":148,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["514851f",{"_index":791,"title":{},"body":{"changelog.html":{}}}],["520abce",{"_index":765,"title":{},"body":{"changelog.html":{}}}],["53",{"_index":721,"title":{},"body":{"changelog.html":{}}}],["534bdf6",{"_index":560,"title":{},"body":{"changelog.html":{}}}],["54",{"_index":717,"title":{},"body":{"changelog.html":{}}}],["54be6b7",{"_index":723,"title":{},"body":{"changelog.html":{}}}],["5571069",{"_index":812,"title":{},"body":{"changelog.html":{}}}],["560bcb1",{"_index":624,"title":{},"body":{"changelog.html":{}}}],["56e463b",{"_index":615,"title":{},"body":{"changelog.html":{}}}],["59078e2",{"_index":907,"title":{},"body":{"changelog.html":{}}}],["5d6a576",{"_index":646,"title":{},"body":{"changelog.html":{}}}],["5f7f468",{"_index":807,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":555,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["6.0",{"_index":997,"title":{},"body":{"index.html":{}}}],["6.0.0",{"_index":976,"title":{},"body":{"dependencies.html":{}}}],["60c2e08",{"_index":920,"title":{},"body":{"changelog.html":{}}}],["62",{"_index":707,"title":{},"body":{"changelog.html":{}}}],["65",{"_index":702,"title":{},"body":{"changelog.html":{}}}],["66",{"_index":695,"title":{},"body":{"changelog.html":{}}}],["66f2289",{"_index":556,"title":{},"body":{"changelog.html":{}}}],["68",{"_index":681,"title":{},"body":{"changelog.html":{}}}],["68dc84f",{"_index":827,"title":{},"body":{"changelog.html":{}}}],["697c52c",{"_index":803,"title":{},"body":{"changelog.html":{}}}],["70",{"_index":687,"title":{},"body":{"changelog.html":{}}}],["71d5a05",{"_index":686,"title":{},"body":{"changelog.html":{}}}],["72",{"_index":684,"title":{},"body":{"changelog.html":{}}}],["74424ba",{"_index":925,"title":{},"body":{"changelog.html":{}}}],["75ce122",{"_index":782,"title":{},"body":{"changelog.html":{}}}],["79",{"_index":654,"title":{},"body":{"changelog.html":{}}}],["7b1280e",{"_index":950,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":595,"title":{},"body":{"changelog.html":{}}}],["80",{"_index":655,"title":{},"body":{"changelog.html":{}}}],["8000",{"_index":1036,"title":{},"body":{"index.html":{}}}],["81134ee",{"_index":586,"title":{},"body":{"changelog.html":{}}}],["81fe0b4",{"_index":900,"title":{},"body":{"changelog.html":{}}}],["820612e",{"_index":750,"title":{},"body":{"changelog.html":{}}}],["8232e66",{"_index":747,"title":{},"body":{"changelog.html":{}}}],["83",{"_index":593,"title":{},"body":{"changelog.html":{}}}],["858b3f8",{"_index":856,"title":{},"body":{"changelog.html":{}}}],["86e366c",{"_index":576,"title":{},"body":{"changelog.html":{}}}],["8e3f108",{"_index":760,"title":{},"body":{"changelog.html":{}}}],["9",{"_index":573,"title":{},"body":{"changelog.html":{}}}],["9236e02",{"_index":800,"title":{},"body":{"changelog.html":{}}}],["927235e",{"_index":815,"title":{},"body":{"changelog.html":{}}}],["93a5c4e",{"_index":785,"title":{},"body":{"changelog.html":{}}}],["94dc48d",{"_index":596,"title":{},"body":{"changelog.html":{}}}],["9557c0a",{"_index":866,"title":{},"body":{"changelog.html":{}}}],["9597986",{"_index":816,"title":{},"body":{"changelog.html":{}}}],["99d2f66",{"_index":769,"title":{},"body":{"changelog.html":{}}}],["9]*)px",{"_index":107,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["9c76aac",{"_index":860,"title":{},"body":{"changelog.html":{}}}],["9f9c54a",{"_index":913,"title":{},"body":{"changelog.html":{}}}],["a0323e9",{"_index":706,"title":{},"body":{"changelog.html":{}}}],["a056154",{"_index":696,"title":{},"body":{"changelog.html":{}}}],["a74f9e2",{"_index":752,"title":{},"body":{"changelog.html":{}}}],["a8e5cd3",{"_index":958,"title":{},"body":{"changelog.html":{}}}],["aa169c7",{"_index":779,"title":{},"body":{"changelog.html":{}}}],["above",{"_index":554,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["absolute",{"_index":113,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["action",{"_index":1103,"title":{},"body":{"license.html":{}}}],["active",{"_index":139,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["add",{"_index":394,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["af7abf7",{"_index":649,"title":{},"body":{"changelog.html":{}}}],["allow",{"_index":163,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["allowededges",{"_index":277,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["allownegativeresizes",{"_index":214,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["allows",{"_index":998,"title":{},"body":{"index.html":{}}}],["always",{"_index":619,"title":{},"body":{"changelog.html":{}}}],["amount",{"_index":914,"title":{},"body":{"changelog.html":{}}}],["and/or",{"_index":1071,"title":{},"body":{"license.html":{}}}],["angular",{"_index":381,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["angular/common",{"_index":57,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["angular/core",{"_index":55,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"dependencies.html":{},"index.html":{}}}],["angular2",{"_index":814,"title":{},"body":{"changelog.html":{}}}],["any).eventlisteners[type",{"_index":531,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["aot",{"_index":799,"title":{},"body":{"changelog.html":{}}}],["app",{"_index":871,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["applications",{"_index":710,"title":{},"body":{"changelog.html":{}}}],["applying",{"_index":882,"title":{},"body":{"changelog.html":{}}}],["apps",{"_index":1015,"title":{},"body":{"index.html":{}}}],["arguments",{"_index":498,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["arising",{"_index":1107,"title":{},"body":{"license.html":{}}}],["associated",{"_index":1060,"title":{},"body":{"license.html":{}}}],["audittime",{"_index":71,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["audittime(this.mousemovethrottlems",{"_index":272,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["authors",{"_index":1096,"title":{},"body":{"license.html":{}}}],["auto",{"_index":790,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["b77c9fc",{"_index":740,"title":{},"body":{"changelog.html":{}}}],["bac87e3",{"_index":974,"title":{},"body":{"changelog.html":{}}}],["back",{"_index":704,"title":{},"body":{"changelog.html":{}}}],["be5d727",{"_index":720,"title":{},"body":{"changelog.html":{}}}],["before",{"_index":160,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["before(resize)=\"onresize($event",{"_index":820,"title":{},"body":{"changelog.html":{}}}],["begin",{"_index":221,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["begun",{"_index":224,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["behaviour",{"_index":942,"title":{},"body":{"changelog.html":{}}}],["being",{"_index":810,"title":{},"body":{"changelog.html":{}}}],["between",{"_index":184,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["bf497d2",{"_index":954,"title":{},"body":{"changelog.html":{}}}],["boolean",{"_index":95,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["booleans",{"_index":938,"title":{},"body":{"changelog.html":{}}}],["bootstrap",{"_index":1016,"title":{},"body":{"index.html":{}}}],["border",{"_index":1010,"title":{},"body":{"index.html":{}}}],["bottom",{"_index":15,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["bottomleft",{"_index":474,"title":{},"body":{"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["bottomright",{"_index":475,"title":{},"body":{"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["bounding",{"_index":9,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{}}}],["boundingrect",{"_index":118,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.bottom",{"_index":123,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.height",{"_index":120,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.left",{"_index":124,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.right",{"_index":125,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.top",{"_index":122,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.width",{"_index":121,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrectangle",{"_index":1,"title":{"interfaces/BoundingRectangle.html":{}},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["box",{"_index":1008,"title":{},"body":{"index.html":{}}}],["breaking",{"_index":634,"title":{},"body":{"changelog.html":{}}}],["broken",{"_index":877,"title":{},"body":{"changelog.html":{}}}],["browse",{"_index":1110,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":379,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["browsers",{"_index":906,"title":{},"body":{"changelog.html":{}}}],["bug",{"_index":552,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":829,"title":{},"body":{"changelog.html":{}}}],["bundle",{"_index":949,"title":{},"body":{"changelog.html":{}}}],["bundling",{"_index":652,"title":{},"body":{"changelog.html":{}}}],["c",{"_index":1048,"title":{},"body":{"license.html":{}}}],["c4519a1",{"_index":653,"title":{},"body":{"changelog.html":{}}}],["c60b3f5",{"_index":909,"title":{},"body":{"changelog.html":{}}}],["c76be59",{"_index":902,"title":{},"body":{"changelog.html":{}}}],["c7e3de6",{"_index":633,"title":{},"body":{"changelog.html":{}}}],["call",{"_index":891,"title":{},"body":{"changelog.html":{}}}],["called",{"_index":159,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["camel",{"_index":862,"title":{},"body":{"changelog.html":{}}}],["cancel",{"_index":166,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["case",{"_index":863,"title":{},"body":{"changelog.html":{}}}],["cbe088f",{"_index":848,"title":{},"body":{"changelog.html":{}}}],["change",{"_index":537,"title":{},"body":{"changelog.html":{}}}],["changed",{"_index":666,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":536,"title":{"changelog.html":{}},"body":{}}],["changes",{"_index":540,"title":{},"body":{"changelog.html":{}}}],["changes.resizeedges",{"_index":376,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["changing",{"_index":567,"title":{},"body":{"changelog.html":{}}}],["charge",{"_index":1055,"title":{},"body":{"license.html":{}}}],["check",{"_index":380,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["claim",{"_index":1099,"title":{},"body":{"license.html":{}}}],["class",{"_index":156,"title":{"classes/PointerEventListeners.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{},"overview.html":{}}}],["classes",{"_index":436,"title":{},"body":{"classes/PointerEventListeners.html":{},"changelog.html":{}}}],["clientrect",{"_index":130,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["clientx",{"_index":84,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{}}}],["clienty",{"_index":85,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{}}}],["clone",{"_index":881,"title":{},"body":{"changelog.html":{}}}],["cloned",{"_index":693,"title":{},"body":{"changelog.html":{}}}],["clonednode",{"_index":255,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["closes",{"_index":561,"title":{},"body":{"changelog.html":{}}}],["co",{"_index":892,"title":{},"body":{"changelog.html":{}}}],["col",{"_index":1118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["come",{"_index":1028,"title":{},"body":{"index.html":{}}}],["commit",{"_index":546,"title":{},"body":{"changelog.html":{}}}],["compatibility",{"_index":591,"title":{},"body":{"changelog.html":{}}}],["compilation",{"_index":833,"title":{},"body":{"changelog.html":{}}}],["completely",{"_index":911,"title":{},"body":{"changelog.html":{}}}],["component",{"_index":614,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["con",{"_index":918,"title":{},"body":{"changelog.html":{}}}],["conditions",{"_index":1078,"title":{},"body":{"license.html":{}}}],["configs",{"_index":675,"title":{},"body":{"changelog.html":{}}}],["configured",{"_index":739,"title":{},"body":{"changelog.html":{}}}],["connection",{"_index":1108,"title":{},"body":{"license.html":{}}}],["console.log('element",{"_index":1014,"title":{},"body":{"index.html":{}}}],["const",{"_index":96,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["constructor",{"_index":234,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["constructor(renderer",{"_index":406,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["contain",{"_index":936,"title":{},"body":{"changelog.html":{}}}],["contains",{"_index":494,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["contents",{"_index":992,"title":{},"body":{"index.html":{}}}],["continually",{"_index":1043,"title":{},"body":{"index.html":{}}}],["contract",{"_index":1104,"title":{},"body":{"license.html":{}}}],["coordinate",{"_index":37,"title":{"interfaces/Coordinate.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["coords",{"_index":306,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["copies",{"_index":1073,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1058,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1047,"title":{},"body":{"license.html":{}}}],["core",{"_index":825,"title":{},"body":{"changelog.html":{}}}],["corners",{"_index":973,"title":{},"body":{"changelog.html":{}}}],["correct",{"_index":773,"title":{},"body":{"changelog.html":{}}}],["create",{"_index":880,"title":{},"body":{"changelog.html":{}}}],["css",{"_index":682,"title":{},"body":{"changelog.html":{}}}],["cssclasses",{"_index":755,"title":{},"body":{"changelog.html":{}}}],["current",{"_index":1031,"title":{},"body":{"index.html":{}}}],["currentrect",{"_index":254,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize",{"_index":249,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize!.currentrect",{"_index":348,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize!.edges",{"_index":330,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize!.startingrect",{"_index":329,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.clonednode",{"_index":259,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.clonednode!.scrollleft",{"_index":369,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.clonednode!.scrolltop",{"_index":367,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.edges.bottom",{"_index":304,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.edges.left",{"_index":296,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.edges.right",{"_index":299,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.edges.top",{"_index":301,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.startingrect",{"_index":368,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.startingrect.height}px",{"_index":364,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.startingrect.left}px",{"_index":362,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.startingrect.top}px",{"_index":363,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.startingrect.width}px",{"_index":365,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["cursor",{"_index":202,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["cursorprecision",{"_index":278,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["cursors",{"_index":197,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["customised",{"_index":768,"title":{},"body":{"changelog.html":{}}}],["d5b18cc",{"_index":851,"title":{},"body":{"changelog.html":{}}}],["d5ea756",{"_index":796,"title":{},"body":{"changelog.html":{}}}],["d664038",{"_index":916,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":1100,"title":{},"body":{"license.html":{}}}],["dash",{"_index":864,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":1061,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1109,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":468,"title":{},"body":{"modules/ResizableModule.html":{},"index.html":{}}}],["dedc3bb",{"_index":885,"title":{},"body":{"changelog.html":{}}}],["default",{"_index":170,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["default_resize_cursors",{"_index":199,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":208,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["defined",{"_index":30,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Edges.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"directives/ResizeHandleDirective.html":{}}}],["delete",{"_index":532,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["demo",{"_index":870,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["depend",{"_index":758,"title":{},"body":{"changelog.html":{}}}],["dependencies",{"_index":975,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["dependency",{"_index":575,"title":{},"body":{"changelog.html":{}}}],["deprecate",{"_index":597,"title":{},"body":{"changelog.html":{}}}],["deprecated",{"_index":171,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["description",{"_index":8,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Edges.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{}}}],["destroy",{"_index":233,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["destroyed",{"_index":795,"title":{},"body":{"changelog.html":{}}}],["destroying",{"_index":612,"title":{},"body":{"changelog.html":{}}}],["dev",{"_index":1030,"title":{},"body":{"index.html":{}}}],["development",{"_index":995,"title":{},"body":{"index.html":{}}}],["diff",{"_index":97,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["dimensions",{"_index":213,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["directive",{"_index":42,"title":{"directives/ResizableDirective.html":{},"directives/ResizeHandleDirective.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["directives",{"_index":446,"title":{},"body":{"directives/ResizableDirective.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"overview.html":{}}}],["directory",{"_index":1032,"title":{},"body":{"index.html":{}}}],["disable",{"_index":903,"title":{},"body":{"changelog.html":{}}}],["disableresize",{"_index":910,"title":{},"body":{"changelog.html":{}}}],["disabling",{"_index":912,"title":{},"body":{"changelog.html":{}}}],["dist",{"_index":855,"title":{},"body":{"changelog.html":{}}}],["distribute",{"_index":1069,"title":{},"body":{"license.html":{}}}],["document",{"_index":385,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["documentation",{"_index":994,"title":{},"body":{"index.html":{},"license.html":{}}}],["documented",{"_index":542,"title":{},"body":{"changelog.html":{}}}],["doesn't",{"_index":383,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["don't",{"_index":608,"title":{},"body":{"changelog.html":{}}}],["dont",{"_index":802,"title":{},"body":{"changelog.html":{}}}],["drag",{"_index":489,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["dragged",{"_index":223,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"index.html":{}}}],["dragging",{"_index":496,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["draghandle",{"_index":713,"title":{},"body":{"changelog.html":{}}}],["drop",{"_index":858,"title":{},"body":{"changelog.html":{}}}],["dynamically",{"_index":678,"title":{},"body":{"changelog.html":{}}}],["e.g",{"_index":192,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["e722a86",{"_index":964,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":161,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["eb314fd",{"_index":898,"title":{},"body":{"changelog.html":{}}}],["edge",{"_index":915,"title":{},"body":{"changelog.html":{}}}],["edges",{"_index":76,"title":{"interfaces/Edges.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["edges.interface",{"_index":483,"title":{},"body":{"interfaces/ResizeEvent.html":{}}}],["edgesdiff",{"_index":136,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["edgesdiff[edge",{"_index":133,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["edited",{"_index":761,"title":{},"body":{"changelog.html":{}}}],["effect",{"_index":183,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["effects",{"_index":904,"title":{},"body":{"changelog.html":{}}}],["element",{"_index":12,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["element.js",{"_index":668,"title":{},"body":{"changelog.html":{}}}],["element.nativeelement.getboundingclientrect",{"_index":119,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.offsetheight",{"_index":114,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.offsetleft",{"_index":117,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.offsettop",{"_index":116,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.offsetwidth",{"_index":115,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.scrollleft",{"_index":127,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.scrolltop",{"_index":126,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.umd.js",{"_index":670,"title":{},"body":{"changelog.html":{}}}],["element/bundles/angular",{"_index":669,"title":{},"body":{"changelog.html":{}}}],["element/demo",{"_index":990,"title":{},"body":{"index.html":{}}}],["element/dist/umd/angular",{"_index":667,"title":{},"body":{"changelog.html":{}}}],["element/docs",{"_index":1024,"title":{},"body":{"index.html":{}}}],["elementref",{"_index":44,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["elements",{"_index":211,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["elementthen",{"_index":1003,"title":{},"body":{"index.html":{}}}],["elm",{"_index":238,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["emitted",{"_index":620,"title":{},"body":{"changelog.html":{}}}],["empty",{"_index":62,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["enable",{"_index":180,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["enableghostresize",{"_index":188,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["enableghostresize]=\"true",{"_index":448,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["enableresizestyling",{"_index":886,"title":{},"body":{"changelog.html":{}}}],["enableresizestyling]=\"true",{"_index":933,"title":{},"body":{"changelog.html":{}}}],["ensure",{"_index":618,"title":{},"body":{"changelog.html":{}}}],["entry",{"_index":664,"title":{},"body":{"changelog.html":{}}}],["environment",{"_index":1026,"title":{},"body":{"index.html":{}}}],["errors",{"_index":610,"title":{},"body":{"changelog.html":{}}}],["event",{"_index":86,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["event.changedtouches[0].clientx",{"_index":430,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.changedtouches[0].clienty",{"_index":431,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.clientx",{"_index":413,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.clienty",{"_index":414,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.edges",{"_index":934,"title":{},"body":{"changelog.html":{}}}],["event.interface",{"_index":82,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["event.interface.ts",{"_index":481,"title":{},"body":{"interfaces/ResizeEvent.html":{}}}],["event.preventdefault",{"_index":250,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.targettouches[0].clientx",{"_index":423,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["event.targettouches[0].clienty",{"_index":424,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["event.touches[0].clientx",{"_index":416,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.touches[0].clienty",{"_index":417,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["eventemitter",{"_index":48,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["eventlisteners",{"_index":504,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["events",{"_index":187,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{}}}],["example",{"_index":152,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["export",{"_index":33,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["exported",{"_index":868,"title":{},"body":{"changelog.html":{}}}],["exports",{"_index":470,"title":{},"body":{"modules/ResizableModule.html":{}}}],["expose",{"_index":741,"title":{},"body":{"changelog.html":{}}}],["express",{"_index":1087,"title":{},"body":{"license.html":{}}}],["f24a746",{"_index":683,"title":{},"body":{"changelog.html":{}}}],["f3fe12a",{"_index":834,"title":{},"body":{"changelog.html":{}}}],["f440c87",{"_index":972,"title":{},"body":{"changelog.html":{}}}],["fa73345",{"_index":884,"title":{},"body":{"changelog.html":{}}}],["false",{"_index":165,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["favour",{"_index":600,"title":{},"body":{"changelog.html":{}}}],["fb5599b",{"_index":569,"title":{},"body":{"changelog.html":{}}}],["fe49114",{"_index":948,"title":{},"body":{"changelog.html":{}}}],["features",{"_index":566,"title":{},"body":{"changelog.html":{}}}],["ffad2ca",{"_index":865,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["files",{"_index":836,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["filter",{"_index":67,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["filter(([previouscoords",{"_index":316,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["filter((edges",{"_index":349,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["filter((newboundingrect",{"_index":331,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["find",{"_index":1018,"title":{},"body":{"index.html":{}}}],["find(value",{"_index":101,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["firefox",{"_index":715,"title":{},"body":{"changelog.html":{}}}],["fires",{"_index":901,"title":{},"body":{"changelog.html":{}}}],["fit",{"_index":924,"title":{},"body":{"changelog.html":{}}}],["fitness",{"_index":1092,"title":{},"body":{"license.html":{}}}],["fix",{"_index":714,"title":{},"body":{"changelog.html":{}}}],["fixed",{"_index":210,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["fixes",{"_index":553,"title":{},"body":{"changelog.html":{}}}],["fleshed",{"_index":1006,"title":{},"body":{"index.html":{}}}],["flicker",{"_index":961,"title":{},"body":{"changelog.html":{}}}],["folder",{"_index":1005,"title":{},"body":{"index.html":{}}}],["following",{"_index":1077,"title":{},"body":{"license.html":{}}}],["free",{"_index":1054,"title":{},"body":{"license.html":{}}}],["function",{"_index":89,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["functions",{"_index":978,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":1076,"title":{},"body":{"license.html":{}}}],["generated",{"_index":1021,"title":{},"body":{"index.html":{}}}],["getdiff(movecoords",{"_index":288,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getdiff(newcoords",{"_index":315,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getdiff(previouscoords",{"_index":314,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getedgesdiff",{"_index":337,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getedgesdiff(undefined",{"_index":982,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getelementrect",{"_index":352,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getelementrect(element",{"_index":983,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getgrid",{"_index":305,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getgrid(newcoords",{"_index":319,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getinstance",{"_index":404,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getinstance(renderer",{"_index":443,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["getnewboundingrectangle",{"_index":328,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getnewboundingrectangle(startingrect",{"_index":371,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getresizecursor",{"_index":980,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getresizecursor(currentresize.edges",{"_index":354,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getresizecursor(edges",{"_index":984,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getresizecursor(resizeedges",{"_index":280,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getresizecursors",{"_index":264,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getresizeedges",{"_index":275,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getresizeedges(undefined",{"_index":985,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getsnapgrid",{"_index":293,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getting",{"_index":534,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["ghost",{"_index":146,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["ghostelementpositioning",{"_index":112,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["gives",{"_index":756,"title":{},"body":{"changelog.html":{}}}],["global",{"_index":656,"title":{},"body":{"changelog.html":{}}}],["globally",{"_index":685,"title":{},"body":{"changelog.html":{}}}],["granted",{"_index":1053,"title":{},"body":{"license.html":{}}}],["grid",{"_index":190,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["guidelines",{"_index":547,"title":{},"body":{"changelog.html":{}}}],["handle",{"_index":173,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["handle.directive",{"_index":473,"title":{},"body":{"modules/ResizableModule.html":{}}}],["handle.directive.ts",{"_index":485,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["handle.directive.ts:112",{"_index":500,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["handle.directive.ts:31",{"_index":493,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["handle.directive.ts:37",{"_index":492,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["handle.directive.ts:59",{"_index":502,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["handlers",{"_index":698,"title":{},"body":{"changelog.html":{}}}],["handles",{"_index":205,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["height",{"_index":17,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["here",{"_index":1023,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":1052,"title":{},"body":{"license.html":{}}}],["hidden",{"_index":226,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["higher",{"_index":635,"title":{},"body":{"changelog.html":{}}}],["holders",{"_index":1097,"title":{},"body":{"license.html":{}}}],["host",{"_index":613,"title":{},"body":{"changelog.html":{}}}],["hostlistener",{"_index":503,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["hostlistener('mousedown",{"_index":507,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["hostlistener('mouseup",{"_index":524,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["hostlistener('touchcancel",{"_index":523,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["hostlistener('touchend",{"_index":522,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["hostlistener('touchstart",{"_index":506,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["hostlisteners",{"_index":491,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["hover",{"_index":141,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["html",{"_index":153,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["htmlelement",{"_index":256,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["https://mattlewis92.github.io/angular",{"_index":989,"title":{},"body":{"index.html":{}}}],["ie11",{"_index":705,"title":{},"body":{"changelog.html":{}}}],["immediately",{"_index":611,"title":{},"body":{"changelog.html":{}}}],["implementation",{"_index":968,"title":{},"body":{"changelog.html":{}}}],["implements",{"_index":158,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["implied",{"_index":1088,"title":{},"body":{"license.html":{}}}],["import",{"_index":41,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["imports",{"_index":854,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["improve",{"_index":628,"title":{},"body":{"changelog.html":{}}}],["improvements",{"_index":580,"title":{},"body":{"changelog.html":{}}}],["include",{"_index":824,"title":{},"body":{"changelog.html":{}}}],["included",{"_index":1081,"title":{},"body":{"license.html":{}}}],["including",{"_index":1064,"title":{},"body":{"license.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":24,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Edges.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{}}}],["inherit",{"_index":263,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["initial",{"_index":966,"title":{},"body":{"changelog.html":{}}}],["initialise",{"_index":582,"title":{},"body":{"changelog.html":{}}}],["initialrectangle",{"_index":338,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["initialrectangle[edge",{"_index":135,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["inject",{"_index":53,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["inject(platform_id",{"_index":235,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["input",{"_index":47,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["inputs",{"_index":450,"title":{},"body":{"directives/ResizableDirective.html":{},"directives/ResizeHandleDirective.html":{}}}],["inside",{"_index":487,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["install",{"_index":999,"title":{},"body":{"index.html":{}}}],["installation",{"_index":993,"title":{},"body":{"index.html":{}}}],["instance",{"_index":401,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["instances",{"_index":735,"title":{},"body":{"changelog.html":{}}}],["instead",{"_index":174,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["interface",{"_index":0,"title":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{}},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{},"overview.html":{}}}],["interfaces/bounding",{"_index":78,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["interfaces/edges.interface",{"_index":77,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["interfaces/resize",{"_index":81,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["invalid",{"_index":203,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["isnumbercloseto",{"_index":90,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["isnumbercloseto(value1",{"_index":986,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isplatformbrowser",{"_index":56,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["isplatformbrowser(this.platformid",{"_index":386,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["iswithinboundingx",{"_index":981,"title":{},"body":{"miscellaneous/functions.html":{}}}],["iswithinboundingx(undefined",{"_index":987,"title":{},"body":{"miscellaneous/functions.html":{}}}],["iswithinboundingy",{"_index":128,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["iswithinboundingy(undefined",{"_index":988,"title":{},"body":{"miscellaneous/functions.html":{}}}],["itself",{"_index":176,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["js",{"_index":826,"title":{},"body":{"changelog.html":{}}}],["keep",{"_index":784,"title":{},"body":{"changelog.html":{}}}],["key",{"_index":25,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Edges.html":{},"directives/ResizeHandleDirective.html":{}}}],["kind",{"_index":1086,"title":{},"body":{"license.html":{}}}],["know",{"_index":384,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["last",{"_index":894,"title":{},"body":{"changelog.html":{}}}],["lazily",{"_index":581,"title":{},"body":{"changelog.html":{}}}],["left",{"_index":18,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["leftorright",{"_index":476,"title":{},"body":{"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["legacyresizeedgesenabled",{"_index":271,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["lettable",{"_index":647,"title":{},"body":{"changelog.html":{}}}],["level",{"_index":598,"title":{},"body":{"changelog.html":{}}}],["lewis",{"_index":1050,"title":{},"body":{"license.html":{}}}],["liability",{"_index":1101,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1098,"title":{},"body":{"license.html":{}}}],["library",{"_index":662,"title":{},"body":{"changelog.html":{}}}],["license",{"_index":996,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["limitation",{"_index":1065,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1089,"title":{},"body":{"license.html":{}}}],["line",{"_index":403,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["listener",{"_index":732,"title":{},"body":{"changelog.html":{}}}],["listeners",{"_index":583,"title":{},"body":{"changelog.html":{}}}],["local",{"_index":1029,"title":{},"body":{"index.html":{}}}],["locked",{"_index":191,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["log",{"_index":538,"title":{},"body":{"changelog.html":{}}}],["longer",{"_index":658,"title":{},"body":{"changelog.html":{}}}],["main",{"_index":757,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":150,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["map",{"_index":64,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["map(([previouscoords",{"_index":311,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["matching",{"_index":35,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["math.abs(value1",{"_index":98,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["math.ceil(coords.clientx",{"_index":307,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["math.ceil(coords.clienty",{"_index":308,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["math.round(newcoords.clientx",{"_index":324,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["math.round(newcoords.clienty",{"_index":325,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["matt",{"_index":1049,"title":{},"body":{"license.html":{}}}],["merchantability",{"_index":1091,"title":{},"body":{"license.html":{}}}],["merge",{"_index":61,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"license.html":{}}}],["merge(this.pointereventlisteners.pointerdown",{"_index":244,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["merge(this.pointereventlisteners.pointerup",{"_index":251,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["mergemap",{"_index":65,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["mergemap(startcoords",{"_index":287,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["metadata",{"_index":449,"title":{},"body":{"directives/ResizableDirective.html":{},"directives/ResizeHandleDirective.html":{}}}],["methods",{"_index":437,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["migrate",{"_index":204,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["milliseconds",{"_index":217,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["miscellaneous",{"_index":977,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":944,"title":{},"body":{"changelog.html":{}}}],["mit",{"_index":1046,"title":{},"body":{"index.html":{},"license.html":{}}}],["modified",{"_index":659,"title":{},"body":{"changelog.html":{}}}],["modify",{"_index":1067,"title":{},"body":{"license.html":{}}}],["module",{"_index":464,"title":{"modules/ResizableModule.html":{}},"body":{"index.html":{},"overview.html":{}}}],["modules",{"_index":466,"title":{"modules.html":{}},"body":{"modules/ResizableModule.html":{},"modules.html":{}}}],["more",{"_index":1004,"title":{},"body":{"index.html":{}}}],["mouse",{"_index":196,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["mouse_move_throttle_ms",{"_index":147,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["mousedown",{"_index":229,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["mousedrag",{"_index":286,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["mouseevent",{"_index":87,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["mousemove",{"_index":230,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["mousemove$.pipe(pairwise",{"_index":310,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["mousemove$.pipe(take(1)).pipe(map(coords",{"_index":309,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["mousemoveevent",{"_index":518,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["mousemoveevent.clientx",{"_index":519,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["mousemoveevent.clienty",{"_index":520,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["mousemovethrottlems",{"_index":219,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["mouseup",{"_index":228,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["mouseup$.pipe(takeuntil(this.destroy$)).subscribe",{"_index":372,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["mousing",{"_index":971,"title":{},"body":{"changelog.html":{}}}],["move",{"_index":215,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["movecoords.clientx",{"_index":289,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["movecoords.clienty",{"_index":291,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["ms",{"_index":218,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["multiple",{"_index":952,"title":{},"body":{"changelog.html":{}}}],["mwl",{"_index":867,"title":{},"body":{"changelog.html":{}}}],["mwlresizable",{"_index":155,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["mwlresizehandle",{"_index":490,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["mycomponent",{"_index":1012,"title":{},"body":{"index.html":{}}}],["mymodule",{"_index":1017,"title":{},"body":{"index.html":{}}}],["name",{"_index":393,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{}}}],["ne",{"_index":1115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["need",{"_index":673,"title":{},"body":{"changelog.html":{}}}],["needed",{"_index":585,"title":{},"body":{"changelog.html":{}}}],["negative",{"_index":212,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["nesting",{"_index":922,"title":{},"body":{"changelog.html":{}}}],["new",{"_index":222,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["newboundingrect",{"_index":336,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.height",{"_index":333,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.height}px",{"_index":342,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.left}px",{"_index":345,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.top}px",{"_index":344,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.width",{"_index":334,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.width}px",{"_index":343,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newcoords",{"_index":312,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newgrid",{"_index":318,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newgrid.x",{"_index":321,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newgrid.y",{"_index":323,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newrectangle",{"_index":339,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newrectangle[edge",{"_index":134,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["ng",{"_index":650,"title":{},"body":{"changelog.html":{}}}],["ng4",{"_index":726,"title":{},"body":{"changelog.html":{}}}],["ngmodule",{"_index":471,"title":{},"body":{"modules/ResizableModule.html":{},"index.html":{}}}],["ngonchanges(changes",{"_index":375,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["ngondestroy",{"_index":378,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["ngoninit",{"_index":242,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["ngzone",{"_index":50,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["node",{"_index":694,"title":{},"body":{"changelog.html":{}}}],["node.js",{"_index":1027,"title":{},"body":{"index.html":{}}}],["node_modules/angular",{"_index":819,"title":{},"body":{"changelog.html":{}}}],["node_modules/angular2",{"_index":837,"title":{},"body":{"changelog.html":{}}}],["noninfringement",{"_index":1095,"title":{},"body":{"license.html":{}}}],["notable",{"_index":539,"title":{},"body":{"changelog.html":{}}}],["notice",{"_index":1079,"title":{},"body":{"license.html":{}}}],["now",{"_index":636,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["npm",{"_index":1001,"title":{},"body":{"index.html":{}}}],["null",{"_index":257,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["number",{"_index":27,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/variables.html":{}}}],["numbers",{"_index":937,"title":{},"body":{"changelog.html":{}}}],["nw",{"_index":1114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":169,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["object.freeze",{"_index":1113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.keys(edges).length",{"_index":350,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["object.keys(this.eventlisteners).foreach(type",{"_index":530,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["object.keys(this.resizeedges).some(edge",{"_index":268,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["observable",{"_index":59,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["observables",{"_index":794,"title":{},"body":{"changelog.html":{}}}],["observer",{"_index":60,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["observer.next",{"_index":412,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["obtaining",{"_index":1057,"title":{},"body":{"license.html":{}}}],["offline",{"_index":831,"title":{},"body":{"changelog.html":{}}}],["old",{"_index":941,"title":{},"body":{"changelog.html":{}}}],["once",{"_index":1041,"title":{},"body":{"index.html":{}}}],["onchanges",{"_index":51,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["ondestroy",{"_index":49,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["oninit",{"_index":45,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["onmousedown",{"_index":508,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["onmousemove",{"_index":527,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["onmouseup(clientx",{"_index":525,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["onresize",{"_index":873,"title":{},"body":{"changelog.html":{}}}],["onresizeend",{"_index":874,"title":{},"body":{"changelog.html":{}}}],["onresizeend(event",{"_index":1013,"title":{},"body":{"index.html":{}}}],["onresizestart",{"_index":872,"title":{},"body":{"changelog.html":{}}}],["operator",{"_index":853,"title":{},"body":{"changelog.html":{}}}],["operators",{"_index":648,"title":{},"body":{"changelog.html":{}}}],["opt",{"_index":917,"title":{},"body":{"changelog.html":{}}}],["option",{"_index":599,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["optional",{"_index":16,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Edges.html":{},"classes/PointerEventListeners.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{}}}],["ordinates",{"_index":893,"title":{},"body":{"changelog.html":{}}}],["otherwise",{"_index":1106,"title":{},"body":{"license.html":{}}}],["out",{"_index":1007,"title":{},"body":{"index.html":{},"license.html":{}}}],["output",{"_index":46,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["outputs",{"_index":451,"title":{},"body":{"directives/ResizableDirective.html":{},"changelog.html":{}}}],["outside",{"_index":700,"title":{},"body":{"changelog.html":{}}}],["over",{"_index":200,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["overview",{"_index":1111,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":638,"title":{"dependencies.html":{}},"body":{"changelog.html":{}}}],["packagr",{"_index":651,"title":{},"body":{"changelog.html":{}}}],["pairwise",{"_index":68,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["parameters",{"_index":439,"title":{},"body":{"classes/PointerEventListeners.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":495,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["particular",{"_index":1093,"title":{},"body":{"license.html":{}}}],["pass",{"_index":168,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["passed",{"_index":482,"title":{},"body":{"interfaces/ResizeEvent.html":{}}}],["path",{"_index":835,"title":{},"body":{"changelog.html":{}}}],["peer",{"_index":574,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["peerdependencies",{"_index":844,"title":{},"body":{"changelog.html":{}}}],["performance",{"_index":579,"title":{},"body":{"changelog.html":{}}}],["permission",{"_index":1051,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1074,"title":{},"body":{"license.html":{}}}],["person",{"_index":1056,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1075,"title":{},"body":{"license.html":{}}}],["pipe",{"_index":248,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pipe(filter",{"_index":327,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pipe(share",{"_index":418,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pipe(takeuntil(merge(mouseup",{"_index":326,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["place",{"_index":149,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["placed",{"_index":486,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["platform_id",{"_index":54,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["platformid",{"_index":236,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["point",{"_index":665,"title":{},"body":{"changelog.html":{}}}],["pointerdown",{"_index":397,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointereventcoordinate",{"_index":83,"title":{"interfaces/PointerEventCoordinate.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointereventlisteners",{"_index":232,"title":{"classes/PointerEventListeners.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointereventlisteners.getinstance",{"_index":241,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointereventlisteners.instance",{"_index":405,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointermove",{"_index":398,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointerup",{"_index":399,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pojo",{"_index":899,"title":{},"body":{"changelog.html":{}}}],["port",{"_index":1035,"title":{},"body":{"index.html":{}}}],["portions",{"_index":1083,"title":{},"body":{"license.html":{}}}],["position",{"_index":361,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["positioning",{"_index":209,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["positions",{"_index":175,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["post",{"_index":846,"title":{},"body":{"changelog.html":{}}}],["precision",{"_index":93,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["prefix",{"_index":859,"title":{},"body":{"changelog.html":{}}}],["prepare",{"_index":1025,"title":{},"body":{"index.html":{}}}],["pressed",{"_index":220,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["prevent",{"_index":808,"title":{},"body":{"changelog.html":{}}}],["previous",{"_index":888,"title":{},"body":{"changelog.html":{}}}],["previouscoords",{"_index":313,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["previousgrid",{"_index":317,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["previousgrid.x",{"_index":320,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["previousgrid.y",{"_index":322,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["private",{"_index":231,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["project",{"_index":541,"title":{},"body":{"changelog.html":{}}}],["propagate",{"_index":164,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["properties",{"_index":14,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{}}}],["prototype",{"_index":657,"title":{},"body":{"changelog.html":{}}}],["provide",{"_index":927,"title":{},"body":{"changelog.html":{}}}],["provided",{"_index":1084,"title":{},"body":{"license.html":{}}}],["public",{"_index":227,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["publish",{"_index":1068,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":1094,"title":{},"body":{"license.html":{}}}],["rc5",{"_index":847,"title":{},"body":{"changelog.html":{}}}],["rc6",{"_index":850,"title":{},"body":{"changelog.html":{}}}],["re",{"_index":932,"title":{},"body":{"changelog.html":{}}}],["readme",{"_index":869,"title":{},"body":{"changelog.html":{}}}],["rect",{"_index":129,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["rect.left",{"_index":132,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["rect.top",{"_index":131,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["rectangle",{"_index":10,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{}}}],["rectangle.interface",{"_index":79,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{}}}],["rectangle.interface.ts",{"_index":7,"title":{},"body":{"interfaces/BoundingRectangle.html":{}}}],["rectangle.interface.ts:12",{"_index":31,"title":{},"body":{"interfaces/BoundingRectangle.html":{}}}],["reference",{"_index":764,"title":{},"body":{"changelog.html":{}}}],["register",{"_index":751,"title":{},"body":{"changelog.html":{}}}],["relax",{"_index":745,"title":{},"body":{"changelog.html":{}}}],["release",{"_index":1044,"title":{},"body":{"index.html":{}}}],["released",{"_index":225,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["releaselicense",{"_index":1045,"title":{},"body":{"index.html":{}}}],["reload",{"_index":1037,"title":{},"body":{"index.html":{}}}],["remove",{"_index":602,"title":{},"body":{"changelog.html":{}}}],["removeghostelement",{"_index":258,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["rename",{"_index":813,"title":{},"body":{"changelog.html":{}}}],["renamed",{"_index":818,"title":{},"body":{"changelog.html":{}}}],["renderer",{"_index":237,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["renderer.listen",{"_index":411,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["renderer2",{"_index":43,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["repo",{"_index":1033,"title":{},"body":{"index.html":{}}}],["required",{"_index":637,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["reset",{"_index":789,"title":{},"body":{"changelog.html":{}}}],["resizable",{"_index":151,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["resizable.directive",{"_index":472,"title":{},"body":{"modules/ResizableModule.html":{},"directives/ResizeHandleDirective.html":{}}}],["resizable.js",{"_index":841,"title":{},"body":{"changelog.html":{}}}],["resizable.jsafter",{"_index":839,"title":{},"body":{"changelog.html":{}}}],["resizable/angular2",{"_index":838,"title":{},"body":{"changelog.html":{}}}],["resizable/dist/umd/angular2",{"_index":840,"title":{},"body":{"changelog.html":{}}}],["resizabledirective",{"_index":157,"title":{"directives/ResizableDirective.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["resizablemodule",{"_index":465,"title":{"modules/ResizableModule.html":{}},"body":{"modules/ResizableModule.html":{},"changelog.html":{},"index.html":{},"modules.html":{}}}],["resize",{"_index":138,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["resize_active_class",{"_index":137,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["resize_bottom_hover_class",{"_index":144,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["resize_ghost_element_class",{"_index":145,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["resize_left_hover_class",{"_index":140,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["resize_right_hover_class",{"_index":142,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["resize_top_hover_class",{"_index":143,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["resizeable",{"_index":908,"title":{},"body":{"changelog.html":{}}}],["resizecursorprecision",{"_index":207,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["resizecursors",{"_index":198,"title":{"interfaces/ResizeCursors.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["resized",{"_index":11,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["resizeedges",{"_index":178,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["resizeedges.bottom",{"_index":285,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["resizeedges.left",{"_index":282,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["resizeedges.right",{"_index":283,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["resizeedges.top",{"_index":284,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["resizeedges]=\"{bottom",{"_index":447,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["resizeedges]={top",{"_index":940,"title":{},"body":{"changelog.html":{}}}],["resizeend",{"_index":186,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["resizeevent",{"_index":80,"title":{"interfaces/ResizeEvent.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"index.html":{}}}],["resizehandle",{"_index":676,"title":{},"body":{"changelog.html":{}}}],["resizehandledirective",{"_index":469,"title":{"directives/ResizeHandleDirective.html":{}},"body":{"modules/ResizableModule.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["resizehandles",{"_index":921,"title":{},"body":{"changelog.html":{}}}],["resizesnapgrid",{"_index":195,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["resizestart",{"_index":185,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["resizing",{"_index":182,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["resizing)=\"onresizing($event",{"_index":821,"title":{},"body":{"changelog.html":{}}}],["restore",{"_index":590,"title":{},"body":{"changelog.html":{}}}],["restriction",{"_index":1063,"title":{},"body":{"license.html":{}}}],["result",{"_index":34,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":36,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":99,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["returns",{"_index":445,"title":{},"body":{"classes/PointerEventListeners.html":{},"miscellaneous/functions.html":{}}}],["rezize",{"_index":749,"title":{},"body":{"changelog.html":{}}}],["right",{"_index":19,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["rights",{"_index":1066,"title":{},"body":{"license.html":{}}}],["row",{"_index":1119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":748,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["rxjs",{"_index":63,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["rxjs/operators",{"_index":75,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["save",{"_index":1002,"title":{},"body":{"index.html":{}}}],["scroll",{"_index":692,"title":{},"body":{"changelog.html":{}}}],["scrollleft",{"_index":20,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["scrolltop",{"_index":21,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["se",{"_index":1117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seamless",{"_index":730,"title":{},"body":{"changelog.html":{}}}],["see",{"_index":543,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["selected",{"_index":811,"title":{},"body":{"changelog.html":{}}}],["selector",{"_index":154,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["selectors",{"_index":861,"title":{},"body":{"changelog.html":{}}}],["sell",{"_index":1072,"title":{},"body":{"license.html":{}}}],["server",{"_index":1034,"title":{},"body":{"index.html":{}}}],["set",{"_index":179,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["setelementclass(elm",{"_index":392,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["setting",{"_index":206,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["shall",{"_index":1080,"title":{},"body":{"license.html":{}}}],["share",{"_index":70,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["shared",{"_index":734,"title":{},"body":{"changelog.html":{}}}],["show",{"_index":970,"title":{},"body":{"changelog.html":{}}}],["shown",{"_index":679,"title":{},"body":{"changelog.html":{}}}],["side",{"_index":177,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["simplechanges",{"_index":52,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["sizing",{"_index":1009,"title":{},"body":{"index.html":{}}}],["snap",{"_index":189,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["snapgrid",{"_index":294,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["snapgrid.x",{"_index":297,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["snapgrid.y",{"_index":302,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["software",{"_index":1059,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"index.html":{}}}],["specify",{"_index":939,"title":{},"body":{"changelog.html":{}}}],["src/.../resizable.directive.ts",{"_index":979,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/interfaces/bounding",{"_index":6,"title":{},"body":{"interfaces/BoundingRectangle.html":{}}}],["src/interfaces/edges.interface.ts",{"_index":433,"title":{},"body":{"interfaces/Edges.html":{}}}],["src/interfaces/edges.interface.ts:8",{"_index":435,"title":{},"body":{"interfaces/Edges.html":{}}}],["src/interfaces/resize",{"_index":480,"title":{},"body":{"interfaces/ResizeEvent.html":{}}}],["src/resizable.directive.ts",{"_index":38,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/resizable.directive.ts:287",{"_index":460,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:293",{"_index":458,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:298",{"_index":453,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:305",{"_index":459,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:310",{"_index":457,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:316",{"_index":456,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:321",{"_index":454,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:326",{"_index":452,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:331",{"_index":455,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:336",{"_index":462,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:341",{"_index":463,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:346",{"_index":461,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:822",{"_index":440,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["src/resizable.directive.ts:824",{"_index":441,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["src/resizable.directive.ts:826",{"_index":442,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["src/resizable.directive.ts:830",{"_index":444,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["src/resizable.directive.ts:841",{"_index":438,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["src/resizable.module.ts",{"_index":467,"title":{},"body":{"modules/ResizableModule.html":{}}}],["src/resize",{"_index":484,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["standard",{"_index":544,"title":{},"body":{"changelog.html":{}}}],["start",{"_index":719,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["startcoords.clientx",{"_index":290,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["startcoords.clienty",{"_index":292,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["started",{"_index":535,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["starting",{"_index":889,"title":{},"body":{"changelog.html":{}}}],["startingrect",{"_index":253,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["startwith",{"_index":73,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["startwith(this.resizeedges",{"_index":267,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["state",{"_index":759,"title":{},"body":{"changelog.html":{}}}],["static",{"_index":400,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["string",{"_index":26,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["style[property",{"_index":100,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["styles",{"_index":931,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["styling",{"_index":883,"title":{},"body":{"changelog.html":{}}}],["subject",{"_index":58,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"license.html":{}}}],["sublicense",{"_index":1070,"title":{},"body":{"license.html":{}}}],["subscribe",{"_index":274,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["subscribe((edges",{"_index":351,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["subscribe((newboundingrect",{"_index":340,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["substantial",{"_index":1082,"title":{},"body":{"license.html":{}}}],["suffix",{"_index":643,"title":{},"body":{"changelog.html":{}}}],["support",{"_index":830,"title":{},"body":{"changelog.html":{}}}],["sw",{"_index":1116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["switchmap",{"_index":72,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["switchmap(legacyresizeedgesenabled",{"_index":270,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["sync",{"_index":959,"title":{},"body":{"changelog.html":{}}}],["system.js",{"_index":671,"title":{},"body":{"changelog.html":{}}}],["table",{"_index":991,"title":{},"body":{"index.html":{}}}],["take",{"_index":69,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["takeuntil",{"_index":66,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["takeuntil(this.destroy",{"_index":273,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["tap",{"_index":74,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["template",{"_index":832,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["temporary",{"_index":181,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["test",{"_index":1040,"title":{},"body":{"index.html":{}}}],["test:watch",{"_index":1042,"title":{},"body":{"index.html":{}}}],["testing",{"_index":1039,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1038,"title":{},"body":{"index.html":{}}}],["text",{"_index":809,"title":{},"body":{"changelog.html":{}}}],["thickness",{"_index":201,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.allownegativeresizes",{"_index":332,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.destroy$.next",{"_index":391,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.element.nativeelement",{"_index":512,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.elm",{"_index":276,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.elm.nativeelement",{"_index":360,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.elm.nativeelement.clonenode(true",{"_index":358,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.elm.nativeelement.parentelement.appendchild",{"_index":359,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.elm.nativeelement.parentelement.removechild",{"_index":260,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.enableghostresize",{"_index":357,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.eventlisteners.mousemove",{"_index":517,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.eventlisteners.touchmove",{"_index":510,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.eventlisteners[type",{"_index":533,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.ghostelementpositioning",{"_index":353,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mousedown",{"_index":245,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mousedown.complete",{"_index":387,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mousemove",{"_index":247,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mousemove.complete",{"_index":389,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mouseup",{"_index":252,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mouseup.complete",{"_index":388,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.onmousemove",{"_index":514,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.pointerdown",{"_index":407,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointereventlisteners",{"_index":240,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointereventlisteners.pointermove",{"_index":246,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointermove",{"_index":419,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointerup",{"_index":425,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.addclass",{"_index":366,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.addclass(elm.nativeelement",{"_index":395,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.listen",{"_index":511,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.renderer.removeclass(elm.nativeelement",{"_index":396,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.removeclass(this.elm.nativeelement",{"_index":373,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.setstyle",{"_index":341,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.setstyle(document.body",{"_index":355,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.setstyle(this.elm.nativeelement",{"_index":261,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizable.mousedown.next",{"_index":521,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.resizable.mousemove.next",{"_index":528,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.resizable.mouseup.next",{"_index":526,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.resizecursorprecision",{"_index":279,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizecursors",{"_index":265,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizeedges",{"_index":266,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["this.resizeedges$.complete",{"_index":390,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizeedges$.next(this.resizeedges",{"_index":377,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizeedges[edge",{"_index":269,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizeend.emit",{"_index":374,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizesnapgrid.bottom",{"_index":303,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizesnapgrid.left",{"_index":295,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizesnapgrid.right",{"_index":298,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizesnapgrid.top",{"_index":300,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizestart.emit",{"_index":370,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizing.emit",{"_index":347,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.setelementclass",{"_index":281,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.setelementclass(this.elm",{"_index":356,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.unsubscribeeventlisteners",{"_index":505,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.validateresize",{"_index":335,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.zone.run",{"_index":346,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.zone.runoutsideangular",{"_index":509,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["throttle",{"_index":216,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["through",{"_index":1000,"title":{},"body":{"index.html":{}}}],["throw",{"_index":609,"title":{},"body":{"changelog.html":{}}}],["times",{"_index":953,"title":{},"body":{"changelog.html":{}}}],["top",{"_index":22,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["topleft",{"_index":477,"title":{},"body":{"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["toporbottom",{"_index":478,"title":{},"body":{"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["topright",{"_index":479,"title":{},"body":{"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["tort",{"_index":1105,"title":{},"body":{"license.html":{}}}],["touch",{"_index":774,"title":{},"body":{"changelog.html":{}}}],["touchcancel",{"_index":432,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["touchend",{"_index":429,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["touchend(clientx",{"_index":499,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["touchevent",{"_index":88,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["touchmove",{"_index":422,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["touchmoveevent",{"_index":513,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["touchmoveevent.targettouches[0].clientx",{"_index":515,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["touchmoveevent.targettouches[0].clienty",{"_index":516,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["touchstart",{"_index":415,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["touchstart(event",{"_index":501,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["transform",{"_index":103,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["transform.includes('translate",{"_index":104,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["transform.replace(/.*translate3?d?\\(([0",{"_index":106,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["transforms",{"_index":559,"title":{},"body":{"changelog.html":{}}}],["translate3d",{"_index":558,"title":{},"body":{"changelog.html":{}}}],["translatex",{"_index":105,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["translatey",{"_index":110,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["trigger",{"_index":497,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["triggered",{"_index":434,"title":{},"body":{"interfaces/Edges.html":{}}}],["triggers",{"_index":699,"title":{},"body":{"changelog.html":{}}}],["true",{"_index":162,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["tslint:disable",{"_index":402,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["type",{"_index":32,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":947,"title":{},"body":{"changelog.html":{}}}],["typescript",{"_index":963,"title":{},"body":{"changelog.html":{}}}],["typings",{"_index":823,"title":{},"body":{"changelog.html":{}}}],["ui",{"_index":960,"title":{},"body":{"changelog.html":{}}}],["umd",{"_index":663,"title":{},"body":{"changelog.html":{}}}],["uncancelled",{"_index":957,"title":{},"body":{"changelog.html":{}}}],["undefined",{"_index":29,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Edges.html":{},"directives/ResizeHandleDirective.html":{}}}],["universal",{"_index":382,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["unsubscribe",{"_index":793,"title":{},"body":{"changelog.html":{}}}],["unsubscribeeventlisteners",{"_index":529,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["unsubscribemousedown",{"_index":408,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribemousemove",{"_index":420,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribemouseup",{"_index":426,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribetouchcancel",{"_index":428,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribetouchend",{"_index":427,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribetouchmove",{"_index":421,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribetouchstart",{"_index":409,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["until",{"_index":584,"title":{},"body":{"changelog.html":{}}}],["up",{"_index":896,"title":{},"body":{"changelog.html":{}}}],["update",{"_index":674,"title":{},"body":{"changelog.html":{}}}],["upgrade",{"_index":632,"title":{},"body":{"changelog.html":{}}}],["use",{"_index":172,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":488,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["useful",{"_index":1019,"title":{},"body":{"index.html":{}}}],["user",{"_index":955,"title":{},"body":{"changelog.html":{}}}],["users",{"_index":672,"title":{},"body":{"changelog.html":{}}}],["using",{"_index":603,"title":{},"body":{"changelog.html":{}}}],["valid",{"_index":895,"title":{},"body":{"changelog.html":{}}}],["validate",{"_index":926,"title":{},"body":{"changelog.html":{}}}],["validated",{"_index":929,"title":{},"body":{"changelog.html":{}}}],["validateresize",{"_index":167,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["value",{"_index":102,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["value1",{"_index":91,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["value2",{"_index":92,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["values",{"_index":935,"title":{},"body":{"changelog.html":{}}}],["variables",{"_index":1112,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":545,"title":{},"body":{"changelog.html":{}}}],["versions",{"_index":845,"title":{},"body":{"changelog.html":{}}}],["via",{"_index":806,"title":{},"body":{"changelog.html":{}}}],["view",{"_index":1020,"title":{},"body":{"index.html":{}}}],["viewed",{"_index":1022,"title":{},"body":{"index.html":{}}}],["visibility",{"_index":262,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["void",{"_index":243,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"index.html":{}}}],["w",{"_index":897,"title":{},"body":{"changelog.html":{}}}],["warning",{"_index":746,"title":{},"body":{"changelog.html":{}}}],["warranties",{"_index":1090,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1085,"title":{},"body":{"license.html":{}}}],["way",{"_index":928,"title":{},"body":{"changelog.html":{}}}],["webkit",{"_index":905,"title":{},"body":{"changelog.html":{}}}],["whether",{"_index":1102,"title":{},"body":{"license.html":{}}}],["width",{"_index":23,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["wip",{"_index":967,"title":{},"body":{"changelog.html":{}}}],["within",{"_index":709,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["without",{"_index":1062,"title":{},"body":{"license.html":{}}}],["work",{"_index":1011,"title":{},"body":{"index.html":{}}}],["x",{"_index":39,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["y",{"_index":40,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["yourself",{"_index":660,"title":{},"body":{"changelog.html":{}}}],["zone",{"_index":239,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["zone.runoutsideangular",{"_index":410,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/BoundingRectangle.html":{"url":"interfaces/BoundingRectangle.html","title":"interface - BoundingRectangle","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BoundingRectangle\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/bounding-rectangle.interface.ts\n        \n\n            \n                Description\n            \n            \n                The bounding rectangle of the resized element\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        bottom\n                                \n                                \n                                            Optional\n                                        height\n                                \n                                \n                                        left\n                                \n                                \n                                        right\n                                \n                                \n                                            Optional\n                                        scrollLeft\n                                \n                                \n                                            Optional\n                                        scrollTop\n                                \n                                \n                                        top\n                                \n                                \n                                            Optional\n                                        width\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    number | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/interfaces/bounding-rectangle.interface.ts:12\n                            \n                        \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bottom\n                                    \n                                \n                                \n                                    \n                                        bottom:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        left\n                                    \n                                \n                                \n                                    \n                                        left:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        right\n                                    \n                                \n                                \n                                    \n                                        right:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scrollLeft\n                                    \n                                \n                                \n                                    \n                                        scrollLeft:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scrollTop\n                                    \n                                \n                                \n                                    \n                                        scrollTop:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        top\n                                    \n                                \n                                \n                                    \n                                        top:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface BoundingRectangle {\n  top: number;\n  bottom: number;\n  left: number;\n  right: number;\n  height?: number;\n  width?: number;\n  scrollTop?: number;\n  scrollLeft?: number;\n  [key: string]: number | undefined;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Coordinate.html":{"url":"interfaces/Coordinate.html","title":"interface - Coordinate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Coordinate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resizable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  Inject,\n  PLATFORM_ID\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Subject, Observable, Observer, merge, EMPTY } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  filter,\n  pairwise,\n  take,\n  share,\n  auditTime,\n  switchMap,\n  startWith,\n  tap\n} from 'rxjs/operators';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction isNumberCloseTo(\n  value1: number,\n  value2: number,\n  precision: number = 3\n): boolean {\n  const diff: number = Math.abs(value1 - value2);\n  return diff  style[property])\n    .find(value => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(/.*translate3?d?\\(([0-9]*)px, ([0-9]*)px.*/, '$1');\n    translateY = transform.replace(/.*translate3?d?\\(([0-9]*)px, ([0-9]*)px.*/, '$2');\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX\n    };\n  } else {\n    const boundingRect: BoundingRectangle = element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft\n    };\n  }\n}\n\nfunction isWithinBoundingY({\n  clientY,\n  rect\n}: {\n  clientY: number;\n  rect: ClientRect;\n}): boolean {\n  return clientY >= rect.top && clientY = rect.left && clientX  {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_LEFT_HOVER_CLASS: string = 'resize-left-hover';\nconst RESIZE_RIGHT_HOVER_CLASS: string = 'resize-right-hover';\nconst RESIZE_TOP_HOVER_CLASS: string = 'resize-top-hover';\nconst RESIZE_BOTTOM_HOVER_CLASS: string = 'resize-bottom-hover';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizable]'\n})\nexport class ResizableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * The edges that an element can be resized from. Pass an object like `{top: true, bottom: false}`. By default no edges can be resized.\n   * @deprecated use a resize handle instead that positions itself to the side of the element you would like to resize\n   */\n  @Input() resizeEdges: Edges = {};\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: ResizeCursors = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Mouse over thickness to active cursor.\n   * @deprecated invalid when you migrate to use resize handles instead of setting resizeEdges on the element\n   */\n  @Input() resizeCursorPrecision: number = 3;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Allow elements to be resized to negative dimensions\n   */\n  @Input() allowNegativeResizes: boolean = false;\n  \n  /**\n   * The mouse move throttle in milliseconds, default: 50 ms\n   */\n  @Input() mouseMoveThrottleMS: number = MOUSE_MOVE_THROTTLE_MS;\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private destroy$ = new Subject();\n\n  private resizeEdges$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: any,\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    const mousedown$: Observable = merge(this.pointerEventListeners.pointerDown, this.mousedown);\n\n    const mousemove$ = merge(\n      this.pointerEventListeners.pointerMove,\n      this.mousemove\n    ).pipe(\n      tap(({ event }) => {\n        if (currentResize) {\n          event.preventDefault();\n        }\n      }),\n      share()\n    );\n\n    const mouseup$ = merge(this.pointerEventListeners.pointerUp, this.mouseup);\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const getResizeCursors = (): ResizeCursors => {\n      return {\n        ...DEFAULT_RESIZE_CURSORS,\n        ...this.resizeCursors\n      };\n    };\n\n    this.resizeEdges$\n      .pipe(\n        startWith(this.resizeEdges),\n        map(() => {\n          return (\n            this.resizeEdges &&\n            Object.keys(this.resizeEdges).some(edge => !!this.resizeEdges[edge])\n          );\n        }),\n        switchMap(legacyResizeEdgesEnabled =>\n          legacyResizeEdgesEnabled ? mousemove$ : EMPTY\n        ),\n        auditTime(this.mouseMoveThrottleMS),\n        takeUntil(this.destroy$)\n      )\n      .subscribe(({ clientX, clientY }) => {\n        const resizeEdges: Edges = getResizeEdges({\n          clientX,\n          clientY,\n          elm: this.elm,\n          allowedEdges: this.resizeEdges,\n          cursorPrecision: this.resizeCursorPrecision\n        });\n        const resizeCursors = getResizeCursors();\n        if (!currentResize) {\n          const cursor = getResizeCursor(resizeEdges, resizeCursors);\n          this.renderer.setStyle(this.elm.nativeElement, 'cursor', cursor);\n        }\n        this.setElementClass(\n          this.elm,\n          RESIZE_LEFT_HOVER_CLASS,\n          resizeEdges.left === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_RIGHT_HOVER_CLASS,\n          resizeEdges.right === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_TOP_HOVER_CLASS,\n          resizeEdges.top === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_BOTTOM_HOVER_CLASS,\n          resizeEdges.bottom === true\n        );\n      });\n\n    const mousedrag: Observable = mousedown$\n      .pipe(\n        mergeMap(startCoords => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y)\n            };\n          }\n\n          return (merge(\n            mousemove$.pipe(take(1)).pipe(map(coords => [, coords])),\n            mousemove$.pipe(pairwise())\n          ) as Observable)\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords)\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y\n                };\n              })\n            )\n            .pipe(takeUntil(merge(mouseup$, mousedown$)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return (\n            this.allowNegativeResizes ||\n            !!(\n              newBoundingRect.height &&\n              newBoundingRect.width &&\n              newBoundingRect.height > 0 &&\n              newBoundingRect.width > 0\n            )\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect\n                })\n              })\n            : true;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        this.zone.run(() => {\n          this.resizing.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: newBoundingRect\n            }),\n            rectangle: newBoundingRect\n          });\n        });\n\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    mousedown$\n      .pipe(\n        map(({ clientX, clientY, edges }) => {\n          return (\n            edges ||\n            getResizeEdges({\n              clientX,\n              clientY,\n              elm: this.elm,\n              allowedEdges: this.resizeEdges,\n              cursorPrecision: this.resizeCursorPrecision\n            })\n          );\n        })\n      )\n      .pipe(\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect\n        };\n        const resizeCursors = getResizeCursors();\n        const cursor = getResizeCursor(currentResize.edges, resizeCursors);\n        this.renderer.setStyle(document.body, 'cursor', cursor);\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, true);\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = this.elm.nativeElement.cloneNode(true);\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        this.zone.run(() => {\n          this.resizeStart.emit({\n            edges: getEdgesDiff({\n              edges,\n              initialRectangle: startingRect,\n              newRectangle: startingRect\n            }),\n            rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0)\n          });\n        });\n      });\n\n    mouseup$.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        this.zone.run(() => {\n          this.resizeEnd.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: currentResize!.currentRect\n            }),\n            rectangle: currentResize!.currentRect\n          });\n        });\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.resizeEdges) {\n      this.resizeEdges$.next(this.resizeEdges);\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    // browser check for angular universal, because it doesn't know what document is\n    if (isPlatformBrowser(this.platformId)) {\n      this.renderer.setStyle(document.body, 'cursor', '');\n    }\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.resizeEdges$.complete();\n    this.destroy$.next();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable;\n\n  public pointerMove: Observable;\n\n  public pointerUp: Observable;\n\n  private static instance: PointerEventListeners; // tslint:disable-line\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchStart = renderer.listen(\n            'document',\n            'touchstart',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.touches[0].clientX,\n                clientY: event.touches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          unsubscribeTouchStart();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchMove = renderer.listen(\n            'document',\n            'touchmove',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.targetTouches[0].clientX,\n                clientY: event.targetTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          unsubscribeTouchMove();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: () => void;\n        let unsubscribeTouchCancel: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchEnd = renderer.listen(\n            'document',\n            'touchend',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchCancel = renderer.listen(\n            'document',\n            'touchcancel',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          unsubscribeTouchEnd();\n          unsubscribeTouchCancel();\n        };\n      }\n    ).pipe(share());\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Edges.html":{"url":"interfaces/Edges.html","title":"interface - Edges","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Edges\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/edges.interface.ts\n        \n\n            \n                Description\n            \n            \n                The edges that the resize event were triggered on\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        bottom\n                                \n                                \n                                            Optional\n                                        left\n                                \n                                \n                                            Optional\n                                        right\n                                \n                                \n                                            Optional\n                                        top\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    boolean | number | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/interfaces/edges.interface.ts:8\n                            \n                        \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bottom\n                                    \n                                \n                                \n                                    \n                                        bottom:     boolean | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        left\n                                    \n                                \n                                \n                                    \n                                        left:     boolean | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        right\n                                    \n                                \n                                \n                                    \n                                        right:     boolean | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        top\n                                    \n                                \n                                \n                                    \n                                        top:     boolean | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Edges {\n  top?: boolean | number;\n  bottom?: boolean | number;\n  left?: boolean | number;\n  right?: boolean | number;\n  [key: string]: boolean | number | undefined;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PointerEventCoordinate.html":{"url":"interfaces/PointerEventCoordinate.html","title":"interface - PointerEventCoordinate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PointerEventCoordinate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resizable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        clientX\n                                \n                                \n                                        clientY\n                                \n                                \n                                        event\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clientX\n                                    \n                                \n                                \n                                    \n                                        clientX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clientY\n                                    \n                                \n                                \n                                    \n                                        clientY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        event\n                                    \n                                \n                                \n                                    \n                                        event:     MouseEvent | TouchEvent\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MouseEvent | TouchEvent\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  Inject,\n  PLATFORM_ID\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Subject, Observable, Observer, merge, EMPTY } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  filter,\n  pairwise,\n  take,\n  share,\n  auditTime,\n  switchMap,\n  startWith,\n  tap\n} from 'rxjs/operators';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction isNumberCloseTo(\n  value1: number,\n  value2: number,\n  precision: number = 3\n): boolean {\n  const diff: number = Math.abs(value1 - value2);\n  return diff  style[property])\n    .find(value => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(/.*translate3?d?\\(([0-9]*)px, ([0-9]*)px.*/, '$1');\n    translateY = transform.replace(/.*translate3?d?\\(([0-9]*)px, ([0-9]*)px.*/, '$2');\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX\n    };\n  } else {\n    const boundingRect: BoundingRectangle = element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft\n    };\n  }\n}\n\nfunction isWithinBoundingY({\n  clientY,\n  rect\n}: {\n  clientY: number;\n  rect: ClientRect;\n}): boolean {\n  return clientY >= rect.top && clientY = rect.left && clientX  {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_LEFT_HOVER_CLASS: string = 'resize-left-hover';\nconst RESIZE_RIGHT_HOVER_CLASS: string = 'resize-right-hover';\nconst RESIZE_TOP_HOVER_CLASS: string = 'resize-top-hover';\nconst RESIZE_BOTTOM_HOVER_CLASS: string = 'resize-bottom-hover';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizable]'\n})\nexport class ResizableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * The edges that an element can be resized from. Pass an object like `{top: true, bottom: false}`. By default no edges can be resized.\n   * @deprecated use a resize handle instead that positions itself to the side of the element you would like to resize\n   */\n  @Input() resizeEdges: Edges = {};\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: ResizeCursors = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Mouse over thickness to active cursor.\n   * @deprecated invalid when you migrate to use resize handles instead of setting resizeEdges on the element\n   */\n  @Input() resizeCursorPrecision: number = 3;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Allow elements to be resized to negative dimensions\n   */\n  @Input() allowNegativeResizes: boolean = false;\n  \n  /**\n   * The mouse move throttle in milliseconds, default: 50 ms\n   */\n  @Input() mouseMoveThrottleMS: number = MOUSE_MOVE_THROTTLE_MS;\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private destroy$ = new Subject();\n\n  private resizeEdges$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: any,\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    const mousedown$: Observable = merge(this.pointerEventListeners.pointerDown, this.mousedown);\n\n    const mousemove$ = merge(\n      this.pointerEventListeners.pointerMove,\n      this.mousemove\n    ).pipe(\n      tap(({ event }) => {\n        if (currentResize) {\n          event.preventDefault();\n        }\n      }),\n      share()\n    );\n\n    const mouseup$ = merge(this.pointerEventListeners.pointerUp, this.mouseup);\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const getResizeCursors = (): ResizeCursors => {\n      return {\n        ...DEFAULT_RESIZE_CURSORS,\n        ...this.resizeCursors\n      };\n    };\n\n    this.resizeEdges$\n      .pipe(\n        startWith(this.resizeEdges),\n        map(() => {\n          return (\n            this.resizeEdges &&\n            Object.keys(this.resizeEdges).some(edge => !!this.resizeEdges[edge])\n          );\n        }),\n        switchMap(legacyResizeEdgesEnabled =>\n          legacyResizeEdgesEnabled ? mousemove$ : EMPTY\n        ),\n        auditTime(this.mouseMoveThrottleMS),\n        takeUntil(this.destroy$)\n      )\n      .subscribe(({ clientX, clientY }) => {\n        const resizeEdges: Edges = getResizeEdges({\n          clientX,\n          clientY,\n          elm: this.elm,\n          allowedEdges: this.resizeEdges,\n          cursorPrecision: this.resizeCursorPrecision\n        });\n        const resizeCursors = getResizeCursors();\n        if (!currentResize) {\n          const cursor = getResizeCursor(resizeEdges, resizeCursors);\n          this.renderer.setStyle(this.elm.nativeElement, 'cursor', cursor);\n        }\n        this.setElementClass(\n          this.elm,\n          RESIZE_LEFT_HOVER_CLASS,\n          resizeEdges.left === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_RIGHT_HOVER_CLASS,\n          resizeEdges.right === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_TOP_HOVER_CLASS,\n          resizeEdges.top === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_BOTTOM_HOVER_CLASS,\n          resizeEdges.bottom === true\n        );\n      });\n\n    const mousedrag: Observable = mousedown$\n      .pipe(\n        mergeMap(startCoords => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y)\n            };\n          }\n\n          return (merge(\n            mousemove$.pipe(take(1)).pipe(map(coords => [, coords])),\n            mousemove$.pipe(pairwise())\n          ) as Observable)\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords)\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y\n                };\n              })\n            )\n            .pipe(takeUntil(merge(mouseup$, mousedown$)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return (\n            this.allowNegativeResizes ||\n            !!(\n              newBoundingRect.height &&\n              newBoundingRect.width &&\n              newBoundingRect.height > 0 &&\n              newBoundingRect.width > 0\n            )\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect\n                })\n              })\n            : true;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        this.zone.run(() => {\n          this.resizing.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: newBoundingRect\n            }),\n            rectangle: newBoundingRect\n          });\n        });\n\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    mousedown$\n      .pipe(\n        map(({ clientX, clientY, edges }) => {\n          return (\n            edges ||\n            getResizeEdges({\n              clientX,\n              clientY,\n              elm: this.elm,\n              allowedEdges: this.resizeEdges,\n              cursorPrecision: this.resizeCursorPrecision\n            })\n          );\n        })\n      )\n      .pipe(\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect\n        };\n        const resizeCursors = getResizeCursors();\n        const cursor = getResizeCursor(currentResize.edges, resizeCursors);\n        this.renderer.setStyle(document.body, 'cursor', cursor);\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, true);\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = this.elm.nativeElement.cloneNode(true);\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        this.zone.run(() => {\n          this.resizeStart.emit({\n            edges: getEdgesDiff({\n              edges,\n              initialRectangle: startingRect,\n              newRectangle: startingRect\n            }),\n            rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0)\n          });\n        });\n      });\n\n    mouseup$.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        this.zone.run(() => {\n          this.resizeEnd.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: currentResize!.currentRect\n            }),\n            rectangle: currentResize!.currentRect\n          });\n        });\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.resizeEdges) {\n      this.resizeEdges$.next(this.resizeEdges);\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    // browser check for angular universal, because it doesn't know what document is\n    if (isPlatformBrowser(this.platformId)) {\n      this.renderer.setStyle(document.body, 'cursor', '');\n    }\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.resizeEdges$.complete();\n    this.destroy$.next();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable;\n\n  public pointerMove: Observable;\n\n  public pointerUp: Observable;\n\n  private static instance: PointerEventListeners; // tslint:disable-line\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchStart = renderer.listen(\n            'document',\n            'touchstart',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.touches[0].clientX,\n                clientY: event.touches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          unsubscribeTouchStart();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchMove = renderer.listen(\n            'document',\n            'touchmove',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.targetTouches[0].clientX,\n                clientY: event.targetTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          unsubscribeTouchMove();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: () => void;\n        let unsubscribeTouchCancel: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchEnd = renderer.listen(\n            'document',\n            'touchend',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchCancel = renderer.listen(\n            'document',\n            'touchcancel',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          unsubscribeTouchEnd();\n          unsubscribeTouchCancel();\n        };\n      }\n    ).pipe(share());\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PointerEventListeners.html":{"url":"classes/PointerEventListeners.html","title":"class - PointerEventListeners","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PointerEventListeners\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resizable.directive.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                pointerDown\n                            \n                            \n                                    Public\n                                pointerMove\n                            \n                            \n                                    Public\n                                pointerUp\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getInstance\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(renderer: Renderer2, zone: NgZone)\n                    \n                \n                        \n                            \n                                Defined in src/resizable.directive.ts:841\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        zone\n                                                  \n                                                        \n                                                                        NgZone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            pointerDown\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/resizable.directive.ts:822\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            pointerMove\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/resizable.directive.ts:824\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            pointerUp\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/resizable.directive.ts:826\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getInstance\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInstance(renderer: Renderer2, zone: NgZone)\n                \n            \n\n\n            \n                \n                    Defined in src/resizable.directive.ts:830\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                Renderer2\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    zone\n                                    \n                                                NgZone\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PointerEventListeners\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  Inject,\n  PLATFORM_ID\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Subject, Observable, Observer, merge, EMPTY } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  filter,\n  pairwise,\n  take,\n  share,\n  auditTime,\n  switchMap,\n  startWith,\n  tap\n} from 'rxjs/operators';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction isNumberCloseTo(\n  value1: number,\n  value2: number,\n  precision: number = 3\n): boolean {\n  const diff: number = Math.abs(value1 - value2);\n  return diff  style[property])\n    .find(value => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(/.*translate3?d?\\(([0-9]*)px, ([0-9]*)px.*/, '$1');\n    translateY = transform.replace(/.*translate3?d?\\(([0-9]*)px, ([0-9]*)px.*/, '$2');\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX\n    };\n  } else {\n    const boundingRect: BoundingRectangle = element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft\n    };\n  }\n}\n\nfunction isWithinBoundingY({\n  clientY,\n  rect\n}: {\n  clientY: number;\n  rect: ClientRect;\n}): boolean {\n  return clientY >= rect.top && clientY = rect.left && clientX  {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_LEFT_HOVER_CLASS: string = 'resize-left-hover';\nconst RESIZE_RIGHT_HOVER_CLASS: string = 'resize-right-hover';\nconst RESIZE_TOP_HOVER_CLASS: string = 'resize-top-hover';\nconst RESIZE_BOTTOM_HOVER_CLASS: string = 'resize-bottom-hover';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizable]'\n})\nexport class ResizableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * The edges that an element can be resized from. Pass an object like `{top: true, bottom: false}`. By default no edges can be resized.\n   * @deprecated use a resize handle instead that positions itself to the side of the element you would like to resize\n   */\n  @Input() resizeEdges: Edges = {};\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: ResizeCursors = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Mouse over thickness to active cursor.\n   * @deprecated invalid when you migrate to use resize handles instead of setting resizeEdges on the element\n   */\n  @Input() resizeCursorPrecision: number = 3;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Allow elements to be resized to negative dimensions\n   */\n  @Input() allowNegativeResizes: boolean = false;\n  \n  /**\n   * The mouse move throttle in milliseconds, default: 50 ms\n   */\n  @Input() mouseMoveThrottleMS: number = MOUSE_MOVE_THROTTLE_MS;\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private destroy$ = new Subject();\n\n  private resizeEdges$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: any,\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    const mousedown$: Observable = merge(this.pointerEventListeners.pointerDown, this.mousedown);\n\n    const mousemove$ = merge(\n      this.pointerEventListeners.pointerMove,\n      this.mousemove\n    ).pipe(\n      tap(({ event }) => {\n        if (currentResize) {\n          event.preventDefault();\n        }\n      }),\n      share()\n    );\n\n    const mouseup$ = merge(this.pointerEventListeners.pointerUp, this.mouseup);\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const getResizeCursors = (): ResizeCursors => {\n      return {\n        ...DEFAULT_RESIZE_CURSORS,\n        ...this.resizeCursors\n      };\n    };\n\n    this.resizeEdges$\n      .pipe(\n        startWith(this.resizeEdges),\n        map(() => {\n          return (\n            this.resizeEdges &&\n            Object.keys(this.resizeEdges).some(edge => !!this.resizeEdges[edge])\n          );\n        }),\n        switchMap(legacyResizeEdgesEnabled =>\n          legacyResizeEdgesEnabled ? mousemove$ : EMPTY\n        ),\n        auditTime(this.mouseMoveThrottleMS),\n        takeUntil(this.destroy$)\n      )\n      .subscribe(({ clientX, clientY }) => {\n        const resizeEdges: Edges = getResizeEdges({\n          clientX,\n          clientY,\n          elm: this.elm,\n          allowedEdges: this.resizeEdges,\n          cursorPrecision: this.resizeCursorPrecision\n        });\n        const resizeCursors = getResizeCursors();\n        if (!currentResize) {\n          const cursor = getResizeCursor(resizeEdges, resizeCursors);\n          this.renderer.setStyle(this.elm.nativeElement, 'cursor', cursor);\n        }\n        this.setElementClass(\n          this.elm,\n          RESIZE_LEFT_HOVER_CLASS,\n          resizeEdges.left === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_RIGHT_HOVER_CLASS,\n          resizeEdges.right === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_TOP_HOVER_CLASS,\n          resizeEdges.top === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_BOTTOM_HOVER_CLASS,\n          resizeEdges.bottom === true\n        );\n      });\n\n    const mousedrag: Observable = mousedown$\n      .pipe(\n        mergeMap(startCoords => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y)\n            };\n          }\n\n          return (merge(\n            mousemove$.pipe(take(1)).pipe(map(coords => [, coords])),\n            mousemove$.pipe(pairwise())\n          ) as Observable)\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords)\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y\n                };\n              })\n            )\n            .pipe(takeUntil(merge(mouseup$, mousedown$)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return (\n            this.allowNegativeResizes ||\n            !!(\n              newBoundingRect.height &&\n              newBoundingRect.width &&\n              newBoundingRect.height > 0 &&\n              newBoundingRect.width > 0\n            )\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect\n                })\n              })\n            : true;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        this.zone.run(() => {\n          this.resizing.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: newBoundingRect\n            }),\n            rectangle: newBoundingRect\n          });\n        });\n\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    mousedown$\n      .pipe(\n        map(({ clientX, clientY, edges }) => {\n          return (\n            edges ||\n            getResizeEdges({\n              clientX,\n              clientY,\n              elm: this.elm,\n              allowedEdges: this.resizeEdges,\n              cursorPrecision: this.resizeCursorPrecision\n            })\n          );\n        })\n      )\n      .pipe(\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect\n        };\n        const resizeCursors = getResizeCursors();\n        const cursor = getResizeCursor(currentResize.edges, resizeCursors);\n        this.renderer.setStyle(document.body, 'cursor', cursor);\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, true);\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = this.elm.nativeElement.cloneNode(true);\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        this.zone.run(() => {\n          this.resizeStart.emit({\n            edges: getEdgesDiff({\n              edges,\n              initialRectangle: startingRect,\n              newRectangle: startingRect\n            }),\n            rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0)\n          });\n        });\n      });\n\n    mouseup$.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        this.zone.run(() => {\n          this.resizeEnd.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: currentResize!.currentRect\n            }),\n            rectangle: currentResize!.currentRect\n          });\n        });\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.resizeEdges) {\n      this.resizeEdges$.next(this.resizeEdges);\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    // browser check for angular universal, because it doesn't know what document is\n    if (isPlatformBrowser(this.platformId)) {\n      this.renderer.setStyle(document.body, 'cursor', '');\n    }\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.resizeEdges$.complete();\n    this.destroy$.next();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable;\n\n  public pointerMove: Observable;\n\n  public pointerUp: Observable;\n\n  private static instance: PointerEventListeners; // tslint:disable-line\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchStart = renderer.listen(\n            'document',\n            'touchstart',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.touches[0].clientX,\n                clientY: event.touches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          unsubscribeTouchStart();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchMove = renderer.listen(\n            'document',\n            'touchmove',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.targetTouches[0].clientX,\n                clientY: event.targetTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          unsubscribeTouchMove();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: () => void;\n        let unsubscribeTouchCancel: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchEnd = renderer.listen(\n            'document',\n            'touchend',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchCancel = renderer.listen(\n            'document',\n            'touchcancel',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          unsubscribeTouchEnd();\n          unsubscribeTouchCancel();\n        };\n      }\n    ).pipe(share());\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/ResizableDirective.html":{"url":"directives/ResizableDirective.html","title":"directive - ResizableDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  ResizableDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resizable.directive.ts\n        \n\n            \n                Description\n            \n            \n                Place this on an element to make it resizable. For example:\n```html\n\n\nmwlResizable\n[resizeEdges]=\"{bottom: true, right: true, top: true, left: true}\"\n[enableGhostResize]=\"true\">\n\n```\n\n\n            \n\n            \n                Implements\n            \n            \n                            OnInit\n                            OnChanges\n                            OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [mwlResizable]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                allowNegativeResizes\n                            \n                            \n                                enableGhostResize\n                            \n                            \n                                ghostElementPositioning\n                            \n                            \n                                mouseMoveThrottleMS\n                            \n                            \n                                resizeCursorPrecision\n                            \n                            \n                                resizeCursors\n                            \n                            \n                                resizeEdges\n                            \n                            \n                                resizeSnapGrid\n                            \n                            \n                                validateResize\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                resizeEnd\n                            \n                            \n                                resizeStart\n                            \n                            \n                                resizing\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        allowNegativeResizes\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:326\n                            \n                        \n                \n                    \n                        Allow elements to be resized to negative dimensions\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        enableGhostResize\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:298\n                            \n                        \n                \n                    \n                        Set to true to enable a temporary resizing effect of the element in between the resizeStart and resizeEnd events.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostElementPositioning\n                    \n                \n                \n                    \n                        Type :     \"fixed\" | \"absolute\"\n\n                    \n                \n                \n                    \n                        Default value : 'fixed'\n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:321\n                            \n                        \n                \n                    \n                        Define the positioning of the ghost element (can be fixed or absolute)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        mouseMoveThrottleMS\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : MOUSE_MOVE_THROTTLE_MS\n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:331\n                            \n                        \n                \n                    \n                        The mouse move throttle in milliseconds, default: 50 ms\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        resizeCursorPrecision\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 3\n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:316\n                            \n                        \n                \n                    \n                        Mouse over thickness to active cursor.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        resizeCursors\n                    \n                \n                \n                    \n                        Type :         ResizeCursors\n\n                    \n                \n                \n                    \n                        Default value : DEFAULT_RESIZE_CURSORS\n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:310\n                            \n                        \n                \n                    \n                        The mouse cursors that will be set on the resize edges\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        resizeEdges\n                    \n                \n                \n                    \n                        Type :         Edges\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:293\n                            \n                        \n                \n                    \n                        The edges that an element can be resized from. Pass an object like {top: true, bottom: false}. By default no edges can be resized.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        resizeSnapGrid\n                    \n                \n                \n                    \n                        Type :         Edges\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:305\n                            \n                        \n                \n                    \n                        A snap grid that resize events will be locked to.\ne.g. to only allow the element to be resized every 10px set it to {left: 10, right: 10}\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        validateResize\n                    \n                \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:287\n                            \n                        \n                \n                    \n                        A function that will be called before each resize event. Return true to allow the resize event to propagate or false to cancel it\n\n                    \n                \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        resizeEnd\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:346\n                            \n                        \n                \n                    \n                        Called after the mouse is released after a resize event. $event is a ResizeEvent object.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        resizeStart\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:336\n                            \n                        \n                \n                    \n                        Called when the mouse is pressed and a resize event is about to begin. $event is a ResizeEvent object.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        resizing\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:341\n                            \n                        \n                \n                    \n                        Called as the mouse is dragged after a resize event has begun. $event is a ResizeEvent object.\n\n                    \n                \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  Inject,\n  PLATFORM_ID\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Subject, Observable, Observer, merge, EMPTY } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  filter,\n  pairwise,\n  take,\n  share,\n  auditTime,\n  switchMap,\n  startWith,\n  tap\n} from 'rxjs/operators';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction isNumberCloseTo(\n  value1: number,\n  value2: number,\n  precision: number = 3\n): boolean {\n  const diff: number = Math.abs(value1 - value2);\n  return diff  style[property])\n    .find(value => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(/.*translate3?d?\\(([0-9]*)px, ([0-9]*)px.*/, '$1');\n    translateY = transform.replace(/.*translate3?d?\\(([0-9]*)px, ([0-9]*)px.*/, '$2');\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX\n    };\n  } else {\n    const boundingRect: BoundingRectangle = element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft\n    };\n  }\n}\n\nfunction isWithinBoundingY({\n  clientY,\n  rect\n}: {\n  clientY: number;\n  rect: ClientRect;\n}): boolean {\n  return clientY >= rect.top && clientY = rect.left && clientX  {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_LEFT_HOVER_CLASS: string = 'resize-left-hover';\nconst RESIZE_RIGHT_HOVER_CLASS: string = 'resize-right-hover';\nconst RESIZE_TOP_HOVER_CLASS: string = 'resize-top-hover';\nconst RESIZE_BOTTOM_HOVER_CLASS: string = 'resize-bottom-hover';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizable]'\n})\nexport class ResizableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * The edges that an element can be resized from. Pass an object like `{top: true, bottom: false}`. By default no edges can be resized.\n   * @deprecated use a resize handle instead that positions itself to the side of the element you would like to resize\n   */\n  @Input() resizeEdges: Edges = {};\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: ResizeCursors = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Mouse over thickness to active cursor.\n   * @deprecated invalid when you migrate to use resize handles instead of setting resizeEdges on the element\n   */\n  @Input() resizeCursorPrecision: number = 3;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Allow elements to be resized to negative dimensions\n   */\n  @Input() allowNegativeResizes: boolean = false;\n  \n  /**\n   * The mouse move throttle in milliseconds, default: 50 ms\n   */\n  @Input() mouseMoveThrottleMS: number = MOUSE_MOVE_THROTTLE_MS;\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private destroy$ = new Subject();\n\n  private resizeEdges$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: any,\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    const mousedown$: Observable = merge(this.pointerEventListeners.pointerDown, this.mousedown);\n\n    const mousemove$ = merge(\n      this.pointerEventListeners.pointerMove,\n      this.mousemove\n    ).pipe(\n      tap(({ event }) => {\n        if (currentResize) {\n          event.preventDefault();\n        }\n      }),\n      share()\n    );\n\n    const mouseup$ = merge(this.pointerEventListeners.pointerUp, this.mouseup);\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const getResizeCursors = (): ResizeCursors => {\n      return {\n        ...DEFAULT_RESIZE_CURSORS,\n        ...this.resizeCursors\n      };\n    };\n\n    this.resizeEdges$\n      .pipe(\n        startWith(this.resizeEdges),\n        map(() => {\n          return (\n            this.resizeEdges &&\n            Object.keys(this.resizeEdges).some(edge => !!this.resizeEdges[edge])\n          );\n        }),\n        switchMap(legacyResizeEdgesEnabled =>\n          legacyResizeEdgesEnabled ? mousemove$ : EMPTY\n        ),\n        auditTime(this.mouseMoveThrottleMS),\n        takeUntil(this.destroy$)\n      )\n      .subscribe(({ clientX, clientY }) => {\n        const resizeEdges: Edges = getResizeEdges({\n          clientX,\n          clientY,\n          elm: this.elm,\n          allowedEdges: this.resizeEdges,\n          cursorPrecision: this.resizeCursorPrecision\n        });\n        const resizeCursors = getResizeCursors();\n        if (!currentResize) {\n          const cursor = getResizeCursor(resizeEdges, resizeCursors);\n          this.renderer.setStyle(this.elm.nativeElement, 'cursor', cursor);\n        }\n        this.setElementClass(\n          this.elm,\n          RESIZE_LEFT_HOVER_CLASS,\n          resizeEdges.left === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_RIGHT_HOVER_CLASS,\n          resizeEdges.right === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_TOP_HOVER_CLASS,\n          resizeEdges.top === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_BOTTOM_HOVER_CLASS,\n          resizeEdges.bottom === true\n        );\n      });\n\n    const mousedrag: Observable = mousedown$\n      .pipe(\n        mergeMap(startCoords => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y)\n            };\n          }\n\n          return (merge(\n            mousemove$.pipe(take(1)).pipe(map(coords => [, coords])),\n            mousemove$.pipe(pairwise())\n          ) as Observable)\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords)\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y\n                };\n              })\n            )\n            .pipe(takeUntil(merge(mouseup$, mousedown$)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return (\n            this.allowNegativeResizes ||\n            !!(\n              newBoundingRect.height &&\n              newBoundingRect.width &&\n              newBoundingRect.height > 0 &&\n              newBoundingRect.width > 0\n            )\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect\n                })\n              })\n            : true;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        this.zone.run(() => {\n          this.resizing.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: newBoundingRect\n            }),\n            rectangle: newBoundingRect\n          });\n        });\n\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    mousedown$\n      .pipe(\n        map(({ clientX, clientY, edges }) => {\n          return (\n            edges ||\n            getResizeEdges({\n              clientX,\n              clientY,\n              elm: this.elm,\n              allowedEdges: this.resizeEdges,\n              cursorPrecision: this.resizeCursorPrecision\n            })\n          );\n        })\n      )\n      .pipe(\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect\n        };\n        const resizeCursors = getResizeCursors();\n        const cursor = getResizeCursor(currentResize.edges, resizeCursors);\n        this.renderer.setStyle(document.body, 'cursor', cursor);\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, true);\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = this.elm.nativeElement.cloneNode(true);\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        this.zone.run(() => {\n          this.resizeStart.emit({\n            edges: getEdgesDiff({\n              edges,\n              initialRectangle: startingRect,\n              newRectangle: startingRect\n            }),\n            rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0)\n          });\n        });\n      });\n\n    mouseup$.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        this.zone.run(() => {\n          this.resizeEnd.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: currentResize!.currentRect\n            }),\n            rectangle: currentResize!.currentRect\n          });\n        });\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.resizeEdges) {\n      this.resizeEdges$.next(this.resizeEdges);\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    // browser check for angular universal, because it doesn't know what document is\n    if (isPlatformBrowser(this.platformId)) {\n      this.renderer.setStyle(document.body, 'cursor', '');\n    }\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.resizeEdges$.complete();\n    this.destroy$.next();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable;\n\n  public pointerMove: Observable;\n\n  public pointerUp: Observable;\n\n  private static instance: PointerEventListeners; // tslint:disable-line\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchStart = renderer.listen(\n            'document',\n            'touchstart',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.touches[0].clientX,\n                clientY: event.touches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          unsubscribeTouchStart();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchMove = renderer.listen(\n            'document',\n            'touchmove',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.targetTouches[0].clientX,\n                clientY: event.targetTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          unsubscribeTouchMove();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: () => void;\n        let unsubscribeTouchCancel: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchEnd = renderer.listen(\n            'document',\n            'touchend',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchCancel = renderer.listen(\n            'document',\n            'touchcancel',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          unsubscribeTouchEnd();\n          unsubscribeTouchCancel();\n        };\n      }\n    ).pipe(share());\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   "},"modules/ResizableModule.html":{"url":"modules/ResizableModule.html","title":"module - ResizableModule","body":"\n                   \n\n\n\n\n    Modules\n    ResizableModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/resizable.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ResizableDirective\n                        \n                        \n                            ResizeHandleDirective\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ResizableDirective\n                        \n                        \n                            ResizeHandleDirective\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { ResizableDirective } from './resizable.directive';\nimport { ResizeHandleDirective } from './resize-handle.directive';\n\n@NgModule({\n  declarations: [ResizableDirective, ResizeHandleDirective],\n  exports: [ResizableDirective, ResizeHandleDirective]\n})\nexport class ResizableModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResizeCursors.html":{"url":"interfaces/ResizeCursors.html","title":"interface - ResizeCursors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ResizeCursors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resizable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        bottomLeft\n                                \n                                \n                                        bottomRight\n                                \n                                \n                                        leftOrRight\n                                \n                                \n                                        topLeft\n                                \n                                \n                                        topOrBottom\n                                \n                                \n                                        topRight\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bottomLeft\n                                    \n                                \n                                \n                                    \n                                        bottomLeft:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bottomRight\n                                    \n                                \n                                \n                                    \n                                        bottomRight:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        leftOrRight\n                                    \n                                \n                                \n                                    \n                                        leftOrRight:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topLeft\n                                    \n                                \n                                \n                                    \n                                        topLeft:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topOrBottom\n                                    \n                                \n                                \n                                    \n                                        topOrBottom:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topRight\n                                    \n                                \n                                \n                                    \n                                        topRight:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  Inject,\n  PLATFORM_ID\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Subject, Observable, Observer, merge, EMPTY } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  filter,\n  pairwise,\n  take,\n  share,\n  auditTime,\n  switchMap,\n  startWith,\n  tap\n} from 'rxjs/operators';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction isNumberCloseTo(\n  value1: number,\n  value2: number,\n  precision: number = 3\n): boolean {\n  const diff: number = Math.abs(value1 - value2);\n  return diff  style[property])\n    .find(value => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(/.*translate3?d?\\(([0-9]*)px, ([0-9]*)px.*/, '$1');\n    translateY = transform.replace(/.*translate3?d?\\(([0-9]*)px, ([0-9]*)px.*/, '$2');\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX\n    };\n  } else {\n    const boundingRect: BoundingRectangle = element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft\n    };\n  }\n}\n\nfunction isWithinBoundingY({\n  clientY,\n  rect\n}: {\n  clientY: number;\n  rect: ClientRect;\n}): boolean {\n  return clientY >= rect.top && clientY = rect.left && clientX  {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_LEFT_HOVER_CLASS: string = 'resize-left-hover';\nconst RESIZE_RIGHT_HOVER_CLASS: string = 'resize-right-hover';\nconst RESIZE_TOP_HOVER_CLASS: string = 'resize-top-hover';\nconst RESIZE_BOTTOM_HOVER_CLASS: string = 'resize-bottom-hover';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizable]'\n})\nexport class ResizableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * The edges that an element can be resized from. Pass an object like `{top: true, bottom: false}`. By default no edges can be resized.\n   * @deprecated use a resize handle instead that positions itself to the side of the element you would like to resize\n   */\n  @Input() resizeEdges: Edges = {};\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: ResizeCursors = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Mouse over thickness to active cursor.\n   * @deprecated invalid when you migrate to use resize handles instead of setting resizeEdges on the element\n   */\n  @Input() resizeCursorPrecision: number = 3;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Allow elements to be resized to negative dimensions\n   */\n  @Input() allowNegativeResizes: boolean = false;\n  \n  /**\n   * The mouse move throttle in milliseconds, default: 50 ms\n   */\n  @Input() mouseMoveThrottleMS: number = MOUSE_MOVE_THROTTLE_MS;\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private destroy$ = new Subject();\n\n  private resizeEdges$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: any,\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    const mousedown$: Observable = merge(this.pointerEventListeners.pointerDown, this.mousedown);\n\n    const mousemove$ = merge(\n      this.pointerEventListeners.pointerMove,\n      this.mousemove\n    ).pipe(\n      tap(({ event }) => {\n        if (currentResize) {\n          event.preventDefault();\n        }\n      }),\n      share()\n    );\n\n    const mouseup$ = merge(this.pointerEventListeners.pointerUp, this.mouseup);\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const getResizeCursors = (): ResizeCursors => {\n      return {\n        ...DEFAULT_RESIZE_CURSORS,\n        ...this.resizeCursors\n      };\n    };\n\n    this.resizeEdges$\n      .pipe(\n        startWith(this.resizeEdges),\n        map(() => {\n          return (\n            this.resizeEdges &&\n            Object.keys(this.resizeEdges).some(edge => !!this.resizeEdges[edge])\n          );\n        }),\n        switchMap(legacyResizeEdgesEnabled =>\n          legacyResizeEdgesEnabled ? mousemove$ : EMPTY\n        ),\n        auditTime(this.mouseMoveThrottleMS),\n        takeUntil(this.destroy$)\n      )\n      .subscribe(({ clientX, clientY }) => {\n        const resizeEdges: Edges = getResizeEdges({\n          clientX,\n          clientY,\n          elm: this.elm,\n          allowedEdges: this.resizeEdges,\n          cursorPrecision: this.resizeCursorPrecision\n        });\n        const resizeCursors = getResizeCursors();\n        if (!currentResize) {\n          const cursor = getResizeCursor(resizeEdges, resizeCursors);\n          this.renderer.setStyle(this.elm.nativeElement, 'cursor', cursor);\n        }\n        this.setElementClass(\n          this.elm,\n          RESIZE_LEFT_HOVER_CLASS,\n          resizeEdges.left === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_RIGHT_HOVER_CLASS,\n          resizeEdges.right === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_TOP_HOVER_CLASS,\n          resizeEdges.top === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_BOTTOM_HOVER_CLASS,\n          resizeEdges.bottom === true\n        );\n      });\n\n    const mousedrag: Observable = mousedown$\n      .pipe(\n        mergeMap(startCoords => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y)\n            };\n          }\n\n          return (merge(\n            mousemove$.pipe(take(1)).pipe(map(coords => [, coords])),\n            mousemove$.pipe(pairwise())\n          ) as Observable)\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords)\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y\n                };\n              })\n            )\n            .pipe(takeUntil(merge(mouseup$, mousedown$)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return (\n            this.allowNegativeResizes ||\n            !!(\n              newBoundingRect.height &&\n              newBoundingRect.width &&\n              newBoundingRect.height > 0 &&\n              newBoundingRect.width > 0\n            )\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect\n                })\n              })\n            : true;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        this.zone.run(() => {\n          this.resizing.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: newBoundingRect\n            }),\n            rectangle: newBoundingRect\n          });\n        });\n\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    mousedown$\n      .pipe(\n        map(({ clientX, clientY, edges }) => {\n          return (\n            edges ||\n            getResizeEdges({\n              clientX,\n              clientY,\n              elm: this.elm,\n              allowedEdges: this.resizeEdges,\n              cursorPrecision: this.resizeCursorPrecision\n            })\n          );\n        })\n      )\n      .pipe(\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect\n        };\n        const resizeCursors = getResizeCursors();\n        const cursor = getResizeCursor(currentResize.edges, resizeCursors);\n        this.renderer.setStyle(document.body, 'cursor', cursor);\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, true);\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = this.elm.nativeElement.cloneNode(true);\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        this.zone.run(() => {\n          this.resizeStart.emit({\n            edges: getEdgesDiff({\n              edges,\n              initialRectangle: startingRect,\n              newRectangle: startingRect\n            }),\n            rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0)\n          });\n        });\n      });\n\n    mouseup$.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        this.zone.run(() => {\n          this.resizeEnd.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: currentResize!.currentRect\n            }),\n            rectangle: currentResize!.currentRect\n          });\n        });\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.resizeEdges) {\n      this.resizeEdges$.next(this.resizeEdges);\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    // browser check for angular universal, because it doesn't know what document is\n    if (isPlatformBrowser(this.platformId)) {\n      this.renderer.setStyle(document.body, 'cursor', '');\n    }\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.resizeEdges$.complete();\n    this.destroy$.next();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable;\n\n  public pointerMove: Observable;\n\n  public pointerUp: Observable;\n\n  private static instance: PointerEventListeners; // tslint:disable-line\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchStart = renderer.listen(\n            'document',\n            'touchstart',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.touches[0].clientX,\n                clientY: event.touches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          unsubscribeTouchStart();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchMove = renderer.listen(\n            'document',\n            'touchmove',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.targetTouches[0].clientX,\n                clientY: event.targetTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          unsubscribeTouchMove();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: () => void;\n        let unsubscribeTouchCancel: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchEnd = renderer.listen(\n            'document',\n            'touchend',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchCancel = renderer.listen(\n            'document',\n            'touchcancel',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          unsubscribeTouchEnd();\n          unsubscribeTouchCancel();\n        };\n      }\n    ).pipe(share());\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResizeEvent.html":{"url":"interfaces/ResizeEvent.html","title":"interface - ResizeEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ResizeEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/resize-event.interface.ts\n        \n\n            \n                Description\n            \n            \n                The $event object that is passed to the resize events\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        edges\n                                \n                                \n                                        rectangle\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        edges\n                                    \n                                \n                                \n                                    \n                                        edges:         Edges\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Edges\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rectangle\n                                    \n                                \n                                \n                                    \n                                        rectangle:         BoundingRectangle\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BoundingRectangle\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BoundingRectangle } from './bounding-rectangle.interface';\nimport { Edges } from './edges.interface';\n\n/**\n * The `$event` object that is passed to the resize events\n */\nexport interface ResizeEvent {\n  rectangle: BoundingRectangle;\n  edges: Edges;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/ResizeHandleDirective.html":{"url":"directives/ResizeHandleDirective.html","title":"directive - ResizeHandleDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  ResizeHandleDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resize-handle.directive.ts\n        \n\n            \n                Description\n            \n            \n                An element placed inside a mwlResizable directive to be used as a drag and resize handle\nFor example\n```html\n\n\n\n\n```\n\n\n            \n\n            \n                Implements\n            \n            \n                            OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [mwlResizeHandle]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                resizeEdges\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                touchend\n                            \n                            \n                                touchstart\n                            \n                        \n                    \n                \n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(renderer: Renderer2, element: ElementRef, zone: NgZone, resizable: ResizableDirective)\n                    \n                \n                        \n                            \n                                Defined in src/resize-handle.directive.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        element\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        zone\n                                                  \n                                                        \n                                                                        NgZone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        resizable\n                                                  \n                                                        \n                                                                    ResizableDirective\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        resizeEdges\n                    \n                \n                \n                    \n                        Type :         Edges\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                        \n                            \n                                    Defined in src/resize-handle.directive.ts:31\n                            \n                        \n                \n                    \n                        The Edges object that contains the edges of the parent element that dragging the handle will trigger a resize on\n\n                    \n                \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            touchend\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event.changedTouches[0].clientX' '$event.changedTouches[0].clientY' \n                \n            \n            \n                \ntouchend(clientX: number, clientY: number)\n                \n            \n\n\n            \n                \n                    Defined in src/resize-handle.directive.ts:112\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            touchstart\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' '$event.touches[0].clientX' '$event.touches[0].clientY' \n                \n            \n            \n                \ntouchstart(event: MouseEvent | TouchEvent, clientX: number, clientY: number)\n                \n            \n\n\n            \n                \n                    Defined in src/resize-handle.directive.ts:59\n                \n            \n\n\n        \n    \n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  Input,\n  HostListener,\n  Renderer2,\n  ElementRef,\n  OnDestroy,\n  NgZone\n} from '@angular/core';\nimport { ResizableDirective } from './resizable.directive';\nimport { Edges } from './interfaces/edges.interface';\n\n/**\n * An element placed inside a `mwlResizable` directive to be used as a drag and resize handle\n *\n * For example\n *\n * ```html\n * \n *   \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizeHandle]'\n})\nexport class ResizeHandleDirective implements OnDestroy {\n  /**\n   * The `Edges` object that contains the edges of the parent element that dragging the handle will trigger a resize on\n   */\n  @Input() resizeEdges: Edges = {};\n\n  private eventListeners: {\n    touchmove?: () => void;\n    mousemove?: () => void;\n    [key: string]: (() => void) | undefined;\n  } = {};\n\n  constructor(\n    private renderer: Renderer2,\n    private element: ElementRef,\n    private zone: NgZone,\n    private resizable: ResizableDirective\n  ) {}\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n  }\n\n  /**\n   * @hidden\n   */\n  @HostListener('touchstart', [\n    '$event',\n    '$event.touches[0].clientX',\n    '$event.touches[0].clientY'\n  ])\n  @HostListener('mousedown', ['$event', '$event.clientX', '$event.clientY'])\n  onMousedown(\n    event: MouseEvent | TouchEvent,\n    clientX: number,\n    clientY: number\n  ): void {\n    event.preventDefault();\n    this.zone.runOutsideAngular(() => {\n      if (!this.eventListeners.touchmove) {\n        this.eventListeners.touchmove = this.renderer.listen(\n          this.element.nativeElement,\n          'touchmove',\n          (touchMoveEvent: TouchEvent) => {\n            this.onMousemove(\n              touchMoveEvent,\n              touchMoveEvent.targetTouches[0].clientX,\n              touchMoveEvent.targetTouches[0].clientY\n            );\n          }\n        );\n      }\n      if (!this.eventListeners.mousemove) {\n        this.eventListeners.mousemove = this.renderer.listen(\n          this.element.nativeElement,\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.onMousemove(\n              mouseMoveEvent,\n              mouseMoveEvent.clientX,\n              mouseMoveEvent.clientY\n            );\n          }\n        );\n      }\n      this.resizable.mousedown.next({\n        clientX,\n        clientY,\n        edges: this.resizeEdges\n      });\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  @HostListener('touchend', [\n    '$event.changedTouches[0].clientX',\n    '$event.changedTouches[0].clientY'\n  ])\n  @HostListener('touchcancel', [\n    '$event.changedTouches[0].clientX',\n    '$event.changedTouches[0].clientY'\n  ])\n  @HostListener('mouseup', ['$event.clientX', '$event.clientY'])\n  onMouseup(clientX: number, clientY: number): void {\n    this.zone.runOutsideAngular(() => {\n      this.unsubscribeEventListeners();\n      this.resizable.mouseup.next({\n        clientX,\n        clientY,\n        edges: this.resizeEdges\n      });\n    });\n  }\n\n  private onMousemove(\n    event: MouseEvent | TouchEvent,\n    clientX: number,\n    clientY: number\n  ): void {\n    this.resizable.mousemove.next({\n      clientX,\n      clientY,\n      edges: this.resizeEdges,\n      event\n    });\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListeners).forEach(type => {\n      (this as any).eventListeners[type]();\n      delete this.eventListeners[type];\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   "},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n\n3.3.2 (2020-05-22)\nBug Fixes\n\nallow any angular version above 6 (66f2289)\n\n\n3.3.1 (2020-05-22)\nBug Fixes\n\nhandle translate3d transforms on resizable elements (534bdf6), closes #100\n\n\n3.3.0 (2020-01-14)\nFeatures\n\nallow changing mouseMoveThrottleMS (#106) (fb5599b)\n\n\n3.2.6 (2019-10-11)\nBug Fixes\n\nallow angular 9 peer dependency (86e366c)\n\n\n3.2.5 (2019-10-07)\nPerformance Improvements\n\nlazily initialise all mousemove listeners until needed (81134ee)\n\n\n3.2.4 (2019-02-28)\nBug Fixes\n\nrestore compatibility with universal (210decc), closes #83\n\n\n3.2.3 (2019-02-05)\nBug Fixes\n\nallow angular 8 peer dependency (94dc48d)\ndeprecate the top level resizeEdges option in favour of resize handles (2f6ac2d)\n\nPerformance Improvements\n\nremove mouse move listeners when only using resize handles (1185f3a)\n\n\n3.2.2 (2018-08-10)\nBug Fixes\n\ndon't throw errors when immediately destroying the host component (56e463b)\n\n\n3.2.1 (2018-08-03)\nBug Fixes\n\nensure all resizing events are always emitted (25d6fa3)\n\n\n3.2.0 (2018-07-23)\nFeatures\n\nallow negative resizing of elements (560bcb1)\n\n\n3.1.0 (2018-06-19)\nFeatures\n\nimprove default resize cursors (37fc88e)\n\n\n3.0.0 (2018-05-09)\nFeatures\n\nupgrade to angular 6 (c7e3de6)\n\nBREAKING CHANGES\n\nangular 6 and rxjs 6 or higher are now required to use this package\n\n\n2.0.0 (2017-12-26)\nFeatures\n\nexport directives with Directive suffix (0440bbd)\nupgrade to angular 5 (5d6a576)\nuse lettable rxjs operators (af7abf7)\nuse ng-packagr for bundling the package (c4519a1), closes #79 #80\n\nBREAKING CHANGES\n\nthe global observable prototype is now no longer modified by this package, you must\nimport rxjs operators yourself. Also rxjs 5.5 or higher is now required to use this library\nThe UMD entry point has changed from angular-resizable-element/dist/umd/angular-resizable-element.js to angular-resizable-element/bundles/angular-resizable-element.umd.js\n\nSystem.js users will need to update their configs\n\nangular 5 or higher is now required to use this package\nThe Resizable import is now ResizableDirective and ResizeHandle is now\nResizeHandleDirective\n\n\n1.2.5 (2017-12-26)\nBug Fixes\n\nresizeHandle: allow handles to be dynamically shown (34342aa), closes #68\nresize elements that have css transforms (f24a746), closes #72\nset the resize cursor globally when resizing (71d5a05), closes #70\n\n\n1.2.4 (2017-10-21)\nBug Fixes\n\nallow angular 5 peer dependency (25cfe50)\n\n\n1.2.3 (2017-09-28)\nBug Fixes\n\nAdd startingRect scroll position to cloned node. (#66) (a056154)\n\n\n1.2.2 (2017-08-28)\nBug Fixes\n\nensure mouse event handlers are triggers outside of the angular zone (23fc6e5), closes #65\n\n\n1.2.1 (2017-08-06)\nBug Fixes\n\ncursor: change the cursor back to default on IE11 (a0323e9), closes #62\n\n\n1.2.0 (2017-06-12)\nFeatures\n\nexport Edges and BoundingRectangle interfaces for use within applications (10051cd)\n\n\n1.1.2 (2017-06-10)\nBug Fixes\n\ndragHandle: fix drag handles on firefox (1d15bb4), closes #54\n\n\n1.1.1 (2017-05-21)\nBug Fixes\n\nset ghost element width and height on resize start (be5d727), closes #53\n\n\n1.1.0 (2017-05-12)\nFeatures\n\nadd a class to the ghost element (54be6b7)\n\n\n1.0.0 (2017-03-24)\nFeatures\n\nng4: upgrade to angular 4 (4c665d2)\n\nBREAKING CHANGES\n\nng4: angular 4.0 or higher is now required to use this library. The\nupgrade should be seamless\nfor most users.\n\n\n0.8.1 (2017-03-23)\nPerformance Improvements\n\nthrottle mousemove listener events (05f7f7e)\nuse shared mouse event listeners across all resizable instances (2a4b102)\n\n\n0.8.0 (2017-03-16)\nFeatures\n\nghostElementPositioning: allow ghost element positioning to be configured (b77c9fc)\nexpose Resizable and ResizeHandle directives (3633040)\n\n\n0.7.2 (2017-03-04)\nBug Fixes\n\nrelax peer dependency warning to allow angular 4 (8232e66)\n\nPerformance Improvements\n\nrun all rezize events outside the angular zone (820612e)\nresizable: only register mouse move events when a rezize is active (a74f9e2)\nresizeHandle: dynamically register mouse move event listener (4b20cde)\n\n\n0.7.0 (2017-02-28)\nFeatures\n\ncssClasses: Gives classes to main element depend on state (8e3f108)\ncursorPrecision: allow cursor precision value to be edited (3ce508d)\n\n\n0.6.1 (2017-02-11)\nBug Fixes\n\nuniversal: remove MouseEvent reference (520abce), closes #41\n\n\n0.6.0 (2017-02-04)\nFeatures\n\nresizeCursors: allow resize cursors to be customised (99d2f66), closes #40\n\n\n0.5.7 (2017-01-30)\nBug Fixes\n\nuse correct touch event properties (0ab7d40), closes #39\n\n\n0.5.6 (2017-01-25)\nBug Fixes\n\nelement should resize on touch events (aa169c7), closes #36\n\n\n0.5.5 (2017-01-11)\nBug Fixes\n\nadd width and height to cloned node (75ce122), closes #31\nkeep cursor while resizing (93a5c4e), closes #33\n\n\n0.5.4 (2016-12-11)\nBug Fixes\n\ncursor: reset the cursor instead of changing it to auto (514851f)\n\n\n0.5.3 (2016-11-19)\nBug Fixes\n\nunsubscribe all observables when the component is destroyed (d5ea756), closes #27\n\n\n0.5.2 (2016-11-05)\nBug Fixes\n\naot: aot compatibility (9236e02)\n\n\n0.5.1 (2016-11-03)\nBug Fixes\n\ndont change the cursor when resizing an element (697c52c), closes #24\n\n\n0.5.0 (2016-10-29)\nBug Fixes\n\nfix resizing via a drag handle (5f7f468)\nprevent text from being selected when resizing an element (5571069), closes #22\n\nFeatures\n\nrename the library from angular2-resizable to angular-resizable-element (927235e), closes #21\nrename the resize output to resizing (9597986), closes #20\n\nBREAKING CHANGES\n\nThe library has been renamed to angular-resizable-element.\n\nThe UMD entry point has changed to\nnode_modules/angular-resizable-element/dist/umd/angular-resizable-element.js\nBefore(resize)=\"onResize($event)\"\n\nAfter:\n(resizing)=\"onResizing($event)\"\n0.4.1 (2016-09-28)\nBug Fixes\n\ntypings: dont include reference to core-js (68dc84f)\n\n\n0.4.0 (2016-09-25)\nFeatures\n\nbuild: support offline template compilation (f3fe12a)\n\nBREAKING CHANGES\n\nbuild: For System.js users the path to the UMD files has changed:\n\nBefore:\nnode_modules/angular2-resizable/angular2-resizable.jsAfter:\nnode_modules/angular2-resizable/dist/umd/angular2-resizable.js\n0.3.3 (2016-09-13)\nBug Fixes\n\npeerDependencies: allow any versions of angular post RC5 (cbe088f)\n\n\n0.3.2 (2016-09-03)\nFeatures\n\nangular: support RC6 (d5b18cc)\n\n\n0.3.1 (2016-08-25)\nBug Fixes\n\nrxjs: use correct rxjs operator imports in dist (858b3f8), closes #16\n\n\n0.3.0 (2016-08-12)\nFeatures\n\nevents: rename all outputs to drop the on prefix (9c76aac)\ndirective selectors are now camel case instead of dash case (ffad2ca)\nupgrade to angular RC5 (9557c0a)\n\nBREAKING CHANGES\n\nmwl-resizable is now mwlResizable and mwl-resize-handle is now mwlResizeHandle\nAngular RC5 is now required\n\nThe Resizable and ResizeHandle directives are now no longer exported. Instead you must use the ResizableModule. See the readme or the demo app for an example of how to do this.\n\nevents: The onResizeStart output has been renamed to resizeStart\n\nThe onResize output has been renamed to resize\nThe onResizeEnd output has been renamed to resizeEnd\n\n0.2.1 (2016-07-15)\nBug Fixes\n\ndemo: fix broken demo (0a5bf11)\n\n\n0.2.0 (2016-07-15)\nBug Fixes\n\ncreate a clone of the ghost element instead of applying styling to the host (fa73345), closes #15\nonly resize when the cursor is within the bounding rectangle (dedc3bb)\n\nBREAKING CHANGES\n\nenableResizeStyling has been renamed to enableGhostResize\n\n\n0.1.0 (2016-06-26)\nBug Fixes\n\nmousedrag: cancel the previous mousedrag observable when starting a new drag (149c1a4), closes #9\nonResizeEnd: call with co-ordinates of last valid resize rather than where the mouse up event w (eb314fd)\nonResizeStart: ensure the starting rectangle is a POJO rather than a bounding rectangle (81fe0b4)\ncancel mousedrag event when either a mouseup or mousedown event fires (c76be59)\ndisable dragging effects on resizable elements on webkit browsers (59078e2)\nrenamed directive selector from mwl-resizeable to mwl-resizable (c60b3f5)\n\nFeatures\n\ndisableResize: support completely disabling resizing an element (9f9c54a), closes #13\nexpose the amount each edge was resized on resize events (d664038), closes #11\nenableResizeStyling: make temporary resizing of the element opt-in by default so users can con (4c59b05), closes #5\nresizeEdges: allow the resize edges to be customised (60c2e08), closes #8\nresizeHandles: add support for nesting resize handles inside the element (1af705a), closes #10\nresizeSnapGrid: allow resizing to fit to a snap grid (74424ba), closes #3\nvalidate: provide a way for resize events to be validated (4da938d), closes #12\n\nBREAKING CHANGES\n\nenableResizeStyling: the element will no longer have its styles changed by default when dragging and\nresizing. You can now re-enable it by setting [enableResizeStyling]=\"true\" on the element.\nthe $event.edges object values now contain numbers instead of booleans\n\nrename the directive from mwl-resizeable to mwl-resizable\n\n\nresizeEdges: by default the element is no longer resizable.\n\nYou must specify [resizeEdges]={top: true, bottom: true, left: true, right: true} to get the old behaviour back\n\n0.0.3 (2016-06-13)\nBug Fixes\n\nimport missing rxjs operators (300ac10)\n\n\n0.0.2 (2016-06-13)\nBug Fixes\n\ntypes: export Edges and BoundingRectangle types (fe49114)\ndont bundle rxjs with the library (7b1280e)\n\n\n0.0.1 (2016-06-13)\nBug Fixes\n\nallow the element to be resized multiple times (bf497d2)\ndrag: disable user dragging (053fb0e)\nreset element styles on mousedown if there was a previous uncancelled resize (a8e5cd3)\noutputs: make outputs sync to prevent ui flicker (032ea5a)\ntypescript: add missing types (e722a86)\n\nFeatures\n\nimprove transforms, add resize events (0959a12)\ninitial WIP resizable implementation (22af52f)\nshow the cursor when mousing over the edge of the element (f440c87)\nsupport resizing from corners (bac87e3), closes #4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Peer dependencies\n    \n    \n        \n            @angular/core : >=6.0.0\n    \n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            getEdgesDiff   (src/.../resizable.directive.ts)\n                        \n                        \n                            getElementRect   (src/.../resizable.directive.ts)\n                        \n                        \n                            getNewBoundingRectangle   (src/.../resizable.directive.ts)\n                        \n                        \n                            getResizeCursor   (src/.../resizable.directive.ts)\n                        \n                        \n                            getResizeEdges   (src/.../resizable.directive.ts)\n                        \n                        \n                            isNumberCloseTo   (src/.../resizable.directive.ts)\n                        \n                        \n                            isWithinBoundingX   (src/.../resizable.directive.ts)\n                        \n                        \n                            isWithinBoundingY   (src/.../resizable.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/resizable.directive.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            getEdgesDiff\n                        \n                        \n                    \n                \n            \n            \n                \ngetEdgesDiff(undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Edges\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getElementRect\n                        \n                        \n                    \n                \n            \n            \n                \ngetElementRect(element, ghostElementPositioning)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    element\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ghostElementPositioning\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BoundingRectangle\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNewBoundingRectangle\n                        \n                        \n                    \n                \n            \n            \n                \ngetNewBoundingRectangle(startingRect, edges, clientX, clientY)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    startingRect\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    edges\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientX\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientY\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BoundingRectangle\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getResizeCursor\n                        \n                        \n                    \n                \n            \n            \n                \ngetResizeCursor(edges, cursors)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edges\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cursors\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getResizeEdges\n                        \n                        \n                    \n                \n            \n            \n                \ngetResizeEdges(undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Edges\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isNumberCloseTo\n                        \n                        \n                    \n                \n            \n            \n                \nisNumberCloseTo(value1, value2, precision)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value1\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value2\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    precision\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isWithinBoundingX\n                        \n                        \n                    \n                \n            \n            \n                \nisWithinBoundingX(undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isWithinBoundingY\n                        \n                        \n                    \n                \n            \n            \n                \nisWithinBoundingY(undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nangular resizable element\n\n\n\n\n\nDemo\nhttps://mattlewis92.github.io/angular-resizable-element/demo/\nTable of contents\n\nAbout\nInstallation\nDocumentation\nDevelopment\nLicense\n\nAbout\nAn angular 6.0+ directive that allows an element to be dragged and resized\nInstallation\nInstall through npm:\nnpm install --save angular-resizable-elementThen use it in your app like so:\nimport { Component } from '@angular/core';\nimport { ResizeEvent } from 'angular-resizable-element';\n\n@Component({\n  selector: 'demo-app',\n  // you should add some more styles to the element. See the demo folder for a more fleshed out example\n  styles: [\n    `\n      mwlResizable {\n        box-sizing: border-box; // required for the enableGhostResize option to work\n      }\n    `\n  ],\n  template: `\n    \n  `\n})\nexport class MyComponent {\n  onResizeEnd(event: ResizeEvent): void {\n    console.log('Element was resized', event);\n  }\n}\n\n// now use within your apps module\nimport { NgModule } from '@angular/core';\nimport { ResizableModule } from 'angular-resizable-element';\n\n@NgModule({\n  declarations: [MyComponent],\n  imports: [ResizableModule],\n  bootstrap: [MyComponent]\n})\nclass MyModule {}You may also find it useful to view the demo source.\nDocumentation\nAll documentation is auto-generated from the source and can be viewed here:\nhttps://mattlewis92.github.io/angular-resizable-element/docs/\nDevelopment\nPrepare your environment\n\nInstall Node.js and NPM (should come with)\nInstall local dev dependencies: npm install while current directory is this repo\n\nDevelopment server\nRun npm start to start a development server on port 8000 with auto reload + tests.\nTesting\nRun npm test to run tests once or npm run test:watch to continually run tests.\nRelease\nnpm run releaseLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2016 Matt Lewis\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ResizableModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DEFAULT_RESIZE_CURSORS   (src/.../resizable.directive.ts)\n                        \n                        \n                            MOUSE_MOVE_THROTTLE_MS   (src/.../resizable.directive.ts)\n                        \n                        \n                            RESIZE_ACTIVE_CLASS   (src/.../resizable.directive.ts)\n                        \n                        \n                            RESIZE_BOTTOM_HOVER_CLASS   (src/.../resizable.directive.ts)\n                        \n                        \n                            RESIZE_GHOST_ELEMENT_CLASS   (src/.../resizable.directive.ts)\n                        \n                        \n                            RESIZE_LEFT_HOVER_CLASS   (src/.../resizable.directive.ts)\n                        \n                        \n                            RESIZE_RIGHT_HOVER_CLASS   (src/.../resizable.directive.ts)\n                        \n                        \n                            RESIZE_TOP_HOVER_CLASS   (src/.../resizable.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/resizable.directive.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_RESIZE_CURSORS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ResizeCursors\n\n                        \n                    \n                    \n                        \n                            Default value : Object.freeze({\n  topLeft: 'nw-resize',\n  topRight: 'ne-resize',\n  bottomLeft: 'sw-resize',\n  bottomRight: 'se-resize',\n  leftOrRight: 'col-resize',\n  topOrBottom: 'row-resize'\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MOUSE_MOVE_THROTTLE_MS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 50\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RESIZE_ACTIVE_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'resize-active'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RESIZE_BOTTOM_HOVER_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'resize-bottom-hover'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RESIZE_GHOST_ELEMENT_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'resize-ghost-element'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RESIZE_LEFT_HOVER_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'resize-left-hover'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RESIZE_RIGHT_HOVER_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'resize-right-hover'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RESIZE_TOP_HOVER_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'resize-top-hover'\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
